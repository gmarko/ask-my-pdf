[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "openai",
        "importPath": "ai_bricks.api",
        "description": "ai_bricks.api",
        "isExtraImport": true,
        "detail": "ai_bricks.api",
        "documentation": {}
    },
    {
        "label": "stats",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stats",
        "description": "stats",
        "detail": "stats",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "retry",
        "description": "retry",
        "isExtraImport": true,
        "detail": "retry",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "retry",
        "description": "retry",
        "isExtraImport": true,
        "detail": "retry",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "retry",
        "description": "retry",
        "isExtraImport": true,
        "detail": "retry",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "retry",
        "description": "retry",
        "isExtraImport": true,
        "detail": "retry",
        "documentation": {}
    },
    {
        "label": "hexlify",
        "importPath": "binascii",
        "description": "binascii",
        "isExtraImport": true,
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "unhexlify",
        "importPath": "binascii",
        "description": "binascii",
        "isExtraImport": true,
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "hexlify",
        "importPath": "binascii",
        "description": "binascii",
        "isExtraImport": true,
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "unhexlify",
        "importPath": "binascii",
        "description": "binascii",
        "isExtraImport": true,
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "botocore",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "botocore",
        "description": "botocore",
        "detail": "botocore",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "css",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "css",
        "description": "css",
        "detail": "css",
        "documentation": {}
    },
    {
        "label": "prompts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "prompts",
        "description": "prompts",
        "detail": "prompts",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "model",
        "description": "model",
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "storage",
        "description": "storage",
        "detail": "storage",
        "documentation": {}
    },
    {
        "label": "feedback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "feedback",
        "description": "feedback",
        "detail": "feedback",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cache",
        "description": "cache",
        "detail": "cache",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "cosine_distances",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pdf",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdf",
        "description": "pdf",
        "detail": "pdf",
        "documentation": {}
    },
    {
        "label": "ai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ai",
        "description": "ai",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "pypdf",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pypdf",
        "description": "pypdf",
        "detail": "pypdf",
        "documentation": {}
    },
    {
        "label": "AES",
        "importPath": "Crypto.Cipher",
        "description": "Crypto.Cipher",
        "isExtraImport": true,
        "detail": "Crypto.Cipher",
        "documentation": {}
    },
    {
        "label": "pad",
        "importPath": "Crypto.Util.Padding",
        "description": "Crypto.Util.Padding",
        "isExtraImport": true,
        "detail": "Crypto.Util.Padding",
        "documentation": {}
    },
    {
        "label": "unpad",
        "importPath": "Crypto.Util.Padding",
        "description": "Crypto.Util.Padding",
        "isExtraImport": true,
        "detail": "Crypto.Util.Padding",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.jp",
        "description": ".venv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": ".venv.Scripts.jp",
        "documentation": {}
    },
    {
        "label": "use_key",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def use_key(key):\n\topenai.use_key(key)\nusage_stats = stats.get_stats(user=DEFAULT_USER)\ndef set_user(user):\n\tglobal usage_stats\n\tusage_stats = stats.get_stats(user=user)\n\topenai.set_global('user', user)\n\topenai.add_callback('after', stats_callback)\ndef complete(text, **kw):\n\tmodel = kw.get('model','gpt-3.5-turbo')",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "set_user",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def set_user(user):\n\tglobal usage_stats\n\tusage_stats = stats.get_stats(user=user)\n\topenai.set_global('user', user)\n\topenai.add_callback('after', stats_callback)\ndef complete(text, **kw):\n\tmodel = kw.get('model','gpt-3.5-turbo')\n\tllm = openai.model(model)\n\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models\n\tresp = llm.complete(text, **kw)",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "complete",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def complete(text, **kw):\n\tmodel = kw.get('model','gpt-3.5-turbo')\n\tllm = openai.model(model)\n\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models\n\tresp = llm.complete(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "embedding",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "get_token_count",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):\n\tmodel = self.config['model']\n\tusage = resp['usage']\n\tusage['call_cnt'] = 1\n\tif 'text' in out:\n\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:\n\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "stats_callback",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def stats_callback(out, resp, self):\n\tmodel = self.config['model']\n\tusage = resp['usage']\n\tusage['call_cnt'] = 1\n\tif 'text' in out:\n\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:\n\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])\n\t# TODO: prompt_chars\n\t# TODO: total_chars",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "get_community_usage_cost",
        "kind": 2,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "def get_community_usage_cost():\n\tdata = usage_stats.get(f'usage:v4:[date]:{DEFAULT_USER}')\n\tused = 0.0\n\tused += 0.04   * data.get('total_tokens:gpt-4',0) / 1000 # prompt_price=0.03 but output_price=0.06\n\tused += 0.02   * data.get('total_tokens:text-davinci-003',0) / 1000\n\tused += 0.002  * data.get('total_tokens:text-curie-001',0) / 1000\n\tused += 0.002  * data.get('total_tokens:gpt-3.5-turbo',0) / 1000\n\tused += 0.0004 * data.get('total_tokens:text-embedding-ada-002',0) / 1000\n\treturn used",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "DEFAULT_USER = os.getenv('COMMUNITY_USER','')\ndef use_key(key):\n\topenai.use_key(key)\nusage_stats = stats.get_stats(user=DEFAULT_USER)\ndef set_user(user):\n\tglobal usage_stats\n\tusage_stats = stats.get_stats(user=user)\n\topenai.set_global('user', user)\n\topenai.add_callback('after', stats_callback)\ndef complete(text, **kw):",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "usage_stats",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "usage_stats = stats.get_stats(user=DEFAULT_USER)\ndef set_user(user):\n\tglobal usage_stats\n\tusage_stats = stats.get_stats(user=user)\n\topenai.set_global('user', user)\n\topenai.add_callback('after', stats_callback)\ndef complete(text, **kw):\n\tmodel = kw.get('model','gpt-3.5-turbo')\n\tllm = openai.model(model)\n\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tusage_stats",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tusage_stats = stats.get_stats(user=user)\n\topenai.set_global('user', user)\n\topenai.add_callback('after', stats_callback)\ndef complete(text, **kw):\n\tmodel = kw.get('model','gpt-3.5-turbo')\n\tllm = openai.model(model)\n\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models\n\tresp = llm.complete(text, **kw)\n\tresp['model'] = model\n\treturn resp",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tmodel",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tmodel = kw.get('model','gpt-3.5-turbo')\n\tllm = openai.model(model)\n\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models\n\tresp = llm.complete(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tllm",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tllm = openai.model(model)\n\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models\n\tresp = llm.complete(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tllm.config['pre_prompt']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tllm.config['pre_prompt'] = 'output only in raw text' # for chat models\n\tresp = llm.complete(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tresp",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tresp = llm.complete(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tresp['model']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tresp['model'] = model\n\treturn resp\ndef embedding(text, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tmodel",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tllm",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tllm = openai.model(model)\n\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tresp",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tresp = llm.embed(text, **kw)\n\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tresp['model']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tresp['model'] = model\n\treturn resp\ndef embeddings(texts, **kw):\n\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tmodel",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tmodel = kw.get('model','text-embedding-ada-002')\n\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):\n\tmodel = self.config['model']",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tllm",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tllm = openai.model(model)\n\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):\n\tmodel = self.config['model']\n\tusage = resp['usage']",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tresp",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tresp = llm.embed_many(texts, **kw)\n\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):\n\tmodel = self.config['model']\n\tusage = resp['usage']\n\tusage['call_cnt'] = 1",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tresp['model']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tresp['model'] = model\n\treturn resp\ntokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):\n\tmodel = self.config['model']\n\tusage = resp['usage']\n\tusage['call_cnt'] = 1\n\tif 'text' in out:",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "tokenizer_model",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "tokenizer_model = openai.model('text-davinci-003')\ndef get_token_count(text):\n\treturn tokenizer_model.token_count(text)\ndef stats_callback(out, resp, self):\n\tmodel = self.config['model']\n\tusage = resp['usage']\n\tusage['call_cnt'] = 1\n\tif 'text' in out:\n\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tmodel",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tmodel = self.config['model']\n\tusage = resp['usage']\n\tusage['call_cnt'] = 1\n\tif 'text' in out:\n\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:\n\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])\n\t# TODO: prompt_chars\n\t# TODO: total_chars\n\tif 'rtt' in out:",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tusage",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tusage = resp['usage']\n\tusage['call_cnt'] = 1\n\tif 'text' in out:\n\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:\n\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])\n\t# TODO: prompt_chars\n\t# TODO: total_chars\n\tif 'rtt' in out:\n\t\tusage['rtt'] = out['rtt']",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tusage['call_cnt']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tusage['call_cnt'] = 1\n\tif 'text' in out:\n\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:\n\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])\n\t# TODO: prompt_chars\n\t# TODO: total_chars\n\tif 'rtt' in out:\n\t\tusage['rtt'] = out['rtt']\n\t\tusage['rtt_cnt'] = 1",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\t\tusage['completion_chars']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\t\tusage['completion_chars'] = len(out['text'])\n\telif 'texts' in out:\n\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])\n\t# TODO: prompt_chars\n\t# TODO: total_chars\n\tif 'rtt' in out:\n\t\tusage['rtt'] = out['rtt']\n\t\tusage['rtt_cnt'] = 1\n\tusage_stats.incr(f'usage:v4:[date]:[user]', {f'{k}:{model}':v for k,v in usage.items()})\n\tusage_stats.incr(f'hourly:v4:[date]',       {f'{k}:{model}:[hour]':v for k,v in usage.items()})",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\t\tusage['completion_chars']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\t\tusage['completion_chars'] = sum([len(text) for text in out['texts']])\n\t# TODO: prompt_chars\n\t# TODO: total_chars\n\tif 'rtt' in out:\n\t\tusage['rtt'] = out['rtt']\n\t\tusage['rtt_cnt'] = 1\n\tusage_stats.incr(f'usage:v4:[date]:[user]', {f'{k}:{model}':v for k,v in usage.items()})\n\tusage_stats.incr(f'hourly:v4:[date]',       {f'{k}:{model}:[hour]':v for k,v in usage.items()})\n\t#print('STATS_CALLBACK', usage, flush=True) # XXX\ndef get_community_usage_cost():",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\t\tusage['rtt']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\t\tusage['rtt'] = out['rtt']\n\t\tusage['rtt_cnt'] = 1\n\tusage_stats.incr(f'usage:v4:[date]:[user]', {f'{k}:{model}':v for k,v in usage.items()})\n\tusage_stats.incr(f'hourly:v4:[date]',       {f'{k}:{model}:[hour]':v for k,v in usage.items()})\n\t#print('STATS_CALLBACK', usage, flush=True) # XXX\ndef get_community_usage_cost():\n\tdata = usage_stats.get(f'usage:v4:[date]:{DEFAULT_USER}')\n\tused = 0.0\n\tused += 0.04   * data.get('total_tokens:gpt-4',0) / 1000 # prompt_price=0.03 but output_price=0.06\n\tused += 0.02   * data.get('total_tokens:text-davinci-003',0) / 1000",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\t\tusage['rtt_cnt']",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\t\tusage['rtt_cnt'] = 1\n\tusage_stats.incr(f'usage:v4:[date]:[user]', {f'{k}:{model}':v for k,v in usage.items()})\n\tusage_stats.incr(f'hourly:v4:[date]',       {f'{k}:{model}:[hour]':v for k,v in usage.items()})\n\t#print('STATS_CALLBACK', usage, flush=True) # XXX\ndef get_community_usage_cost():\n\tdata = usage_stats.get(f'usage:v4:[date]:{DEFAULT_USER}')\n\tused = 0.0\n\tused += 0.04   * data.get('total_tokens:gpt-4',0) / 1000 # prompt_price=0.03 but output_price=0.06\n\tused += 0.02   * data.get('total_tokens:text-davinci-003',0) / 1000\n\tused += 0.002  * data.get('total_tokens:text-curie-001',0) / 1000",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tdata = usage_stats.get(f'usage:v4:[date]:{DEFAULT_USER}')\n\tused = 0.0\n\tused += 0.04   * data.get('total_tokens:gpt-4',0) / 1000 # prompt_price=0.03 but output_price=0.06\n\tused += 0.02   * data.get('total_tokens:text-davinci-003',0) / 1000\n\tused += 0.002  * data.get('total_tokens:text-curie-001',0) / 1000\n\tused += 0.002  * data.get('total_tokens:gpt-3.5-turbo',0) / 1000\n\tused += 0.0004 * data.get('total_tokens:text-embedding-ada-002',0) / 1000\n\treturn used",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "\tused",
        "kind": 5,
        "importPath": "src.ai",
        "description": "src.ai",
        "peekOfCode": "\tused = 0.0\n\tused += 0.04   * data.get('total_tokens:gpt-4',0) / 1000 # prompt_price=0.03 but output_price=0.06\n\tused += 0.02   * data.get('total_tokens:text-davinci-003',0) / 1000\n\tused += 0.002  * data.get('total_tokens:text-curie-001',0) / 1000\n\tused += 0.002  * data.get('total_tokens:gpt-3.5-turbo',0) / 1000\n\tused += 0.0004 * data.get('total_tokens:text-embedding-ada-002',0) / 1000\n\treturn used",
        "detail": "src.ai",
        "documentation": {}
    },
    {
        "label": "Cache",
        "kind": 6,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "class Cache:\n\t\"Dummy / Base Cache\"\n\tdef __init__(self):\n\t\tpass\n\tdef put(self, key, obj):\n\t\tpass\n\tdef get(self, key):\n\t\treturn None\n\tdef has(self, key):\n\t\treturn False",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "DiskCache",
        "kind": 6,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "class DiskCache(Cache):\n\t\"Local disk based cache\"\n\tdef __init__(self, root):\n\t\tself.root = root\n\tdef path(self, key):\n\t\treturn os.path.join(self.root, self.encode(key))\n\tdef put(self, key, obj):\n\t\tpath = self.path(key)\n\t\tdata = self.serialize(obj)\n\t\twith open(path, 'wb') as f:",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "S3Cache",
        "kind": 6,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "class S3Cache(Cache):\n\t\"S3 based cache\"\n\tdef __init__(self, **kw):\n\t\tbucket = kw.get('bucket') or os.getenv('S3_CACHE_BUCKET','ask-my-pdf')\n\t\tprefix = kw.get('prefix') or os.getenv('S3_CACHE_PREFIX','cache/x1')\n\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "get_cache",
        "kind": 2,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "def get_cache(**kw):\n\tmode = os.getenv('CACHE_MODE','').upper()\n\tpath = os.getenv('CACHE_PATH','')\n\tif mode == 'DISK':\n\t\treturn DiskCache(path)\n\telif mode == 'S3':\n\t\treturn S3Cache(**kw)\n\telse:\n\t\treturn Cache()\nif __name__==\"__main__\":",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tpickled",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tpickled = pickle.dumps(obj)\n\t\tcompressed = self.compress(pickled)\n\t\treturn compressed\n\tdef deserialize(self, data):\n\t\tpickled = self.decompress(data)\n\t\tobj = pickle.loads(pickled)\n\t\treturn obj\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)\n\tdef decompress(self, data):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tcompressed",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tcompressed = self.compress(pickled)\n\t\treturn compressed\n\tdef deserialize(self, data):\n\t\tpickled = self.decompress(data)\n\t\tobj = pickle.loads(pickled)\n\t\treturn obj\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)\n\tdef decompress(self, data):\n\t\treturn zlib.decompress(data)",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tpickled",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tpickled = self.decompress(data)\n\t\tobj = pickle.loads(pickled)\n\t\treturn obj\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)\n\tdef decompress(self, data):\n\t\treturn zlib.decompress(data)\n\tdef encode(self, name):\n\t\treturn hexlify(name.encode('utf8')).decode('utf8')\n\tdef decode(self, name):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tobj = pickle.loads(pickled)\n\t\treturn obj\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)\n\tdef decompress(self, data):\n\t\treturn zlib.decompress(data)\n\tdef encode(self, name):\n\t\treturn hexlify(name.encode('utf8')).decode('utf8')\n\tdef decode(self, name):\n\t\treturn unhexlify(name).decode('utf8')",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\t\tresp",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\t\tresp = fun(*a, **kw)\n\t\t\tself.put(key, resp)\n\t\t\treturn resp\nclass DiskCache(Cache):\n\t\"Local disk based cache\"\n\tdef __init__(self, root):\n\t\tself.root = root\n\tdef path(self, key):\n\t\treturn os.path.join(self.root, self.encode(key))\n\tdef put(self, key, obj):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tself.root",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tself.root = root\n\tdef path(self, key):\n\t\treturn os.path.join(self.root, self.encode(key))\n\tdef put(self, key, obj):\n\t\tpath = self.path(key)\n\t\tdata = self.serialize(obj)\n\t\twith open(path, 'wb') as f:\n\t\t\tf.write(data)\n\tdef get(self, key):\n\t\tpath = self.path(key)",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tpath = self.path(key)\n\t\tdata = self.serialize(obj)\n\t\twith open(path, 'wb') as f:\n\t\t\tf.write(data)\n\tdef get(self, key):\n\t\tpath = self.path(key)\n\t\twith open(path, 'rb') as f:\n\t\t\tdata = f.read()\n\t\tobj = self.deserialize(data)\n\t\treturn obj",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tdata = self.serialize(obj)\n\t\twith open(path, 'wb') as f:\n\t\t\tf.write(data)\n\tdef get(self, key):\n\t\tpath = self.path(key)\n\t\twith open(path, 'rb') as f:\n\t\t\tdata = f.read()\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef has(self, key):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tpath = self.path(key)\n\t\twith open(path, 'rb') as f:\n\t\t\tdata = f.read()\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef has(self, key):\n\t\tpath = self.path(key)\n\t\treturn os.path.exists(path)\n\tdef delete(self, key):\n\t\tpath = self.path(key)",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\t\tdata = f.read()\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef has(self, key):\n\t\tpath = self.path(key)\n\t\treturn os.path.exists(path)\n\tdef delete(self, key):\n\t\tpath = self.path(key)\n\t\tos.remove(path)\nclass S3Cache(Cache):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef has(self, key):\n\t\tpath = self.path(key)\n\t\treturn os.path.exists(path)\n\tdef delete(self, key):\n\t\tpath = self.path(key)\n\t\tos.remove(path)\nclass S3Cache(Cache):\n\t\"S3 based cache\"",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tpath = self.path(key)\n\t\treturn os.path.exists(path)\n\tdef delete(self, key):\n\t\tpath = self.path(key)\n\t\tos.remove(path)\nclass S3Cache(Cache):\n\t\"S3 based cache\"\n\tdef __init__(self, **kw):\n\t\tbucket = kw.get('bucket') or os.getenv('S3_CACHE_BUCKET','ask-my-pdf')\n\t\tprefix = kw.get('prefix') or os.getenv('S3_CACHE_PREFIX','cache/x1')",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tpath",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tpath = self.path(key)\n\t\tos.remove(path)\nclass S3Cache(Cache):\n\t\"S3 based cache\"\n\tdef __init__(self, **kw):\n\t\tbucket = kw.get('bucket') or os.getenv('S3_CACHE_BUCKET','ask-my-pdf')\n\t\tprefix = kw.get('prefix') or os.getenv('S3_CACHE_PREFIX','cache/x1')\n\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tbucket",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tbucket = kw.get('bucket') or os.getenv('S3_CACHE_BUCKET','ask-my-pdf')\n\t\tprefix = kw.get('prefix') or os.getenv('S3_CACHE_PREFIX','cache/x1')\n\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tprefix = kw.get('prefix') or os.getenv('S3_CACHE_PREFIX','cache/x1')\n\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#\n\t\tself.session = boto3.session.Session()",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tregion",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#\n\t\tself.session = boto3.session.Session()\n\t\tself.s3 = self.session.client('s3',",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tsecret",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#\n\t\tself.session = boto3.session.Session()\n\t\tself.s3 = self.session.client('s3',\n\t\t\t\tconfig=botocore.config.Config(s3={'addressing_style': 'virtual'}),\n\t\t\t\tregion_name=region,\n\t\t\t\tendpoint_url=url,",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tself.session",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tself.session = boto3.session.Session()\n\t\tself.s3 = self.session.client('s3',\n\t\t\t\tconfig=botocore.config.Config(s3={'addressing_style': 'virtual'}),\n\t\t\t\tregion_name=region,\n\t\t\t\tendpoint_url=url,\n\t\t\t\taws_access_key_id=key,\n\t\t\t\taws_secret_access_key=secret,\n\t\t\t)\n\t\tself.bucket = bucket\n\t\tself.prefix = prefix",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tself.s3",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tself.s3 = self.session.client('s3',\n\t\t\t\tconfig=botocore.config.Config(s3={'addressing_style': 'virtual'}),\n\t\t\t\tregion_name=region,\n\t\t\t\tendpoint_url=url,\n\t\t\t\taws_access_key_id=key,\n\t\t\t\taws_secret_access_key=secret,\n\t\t\t)\n\t\tself.bucket = bucket\n\t\tself.prefix = prefix\n\tdef get_s3_key(self, key):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tself.bucket",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tself.bucket = bucket\n\t\tself.prefix = prefix\n\tdef get_s3_key(self, key):\n\t\treturn f'{self.prefix}/{key}'\n\tdef put(self, key, obj):\n\t\ts3_key = self.get_s3_key(key)\n\t\tdata = self.serialize(obj)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, s3_key)\n\tdef get(self, key, default=None):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tself.prefix",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tself.prefix = prefix\n\tdef get_s3_key(self, key):\n\t\treturn f'{self.prefix}/{key}'\n\tdef put(self, key, obj):\n\t\ts3_key = self.get_s3_key(key)\n\t\tdata = self.serialize(obj)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, s3_key)\n\tdef get(self, key, default=None):\n\t\ts3_key = self.get_s3_key(key)",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\ts3_key",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\ts3_key = self.get_s3_key(key)\n\t\tdata = self.serialize(obj)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, s3_key)\n\tdef get(self, key, default=None):\n\t\ts3_key = self.get_s3_key(key)\n\t\tf = io.BytesIO()\n\t\ttry:\n\t\t\tself.s3.download_fileobj(self.bucket, s3_key, f)\n\t\texcept:",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tdata = self.serialize(obj)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, s3_key)\n\tdef get(self, key, default=None):\n\t\ts3_key = self.get_s3_key(key)\n\t\tf = io.BytesIO()\n\t\ttry:\n\t\t\tself.s3.download_fileobj(self.bucket, s3_key, f)\n\t\texcept:\n\t\t\tf.close()",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, s3_key)\n\tdef get(self, key, default=None):\n\t\ts3_key = self.get_s3_key(key)\n\t\tf = io.BytesIO()\n\t\ttry:\n\t\t\tself.s3.download_fileobj(self.bucket, s3_key, f)\n\t\texcept:\n\t\t\tf.close()\n\t\t\treturn default",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\ts3_key",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\ts3_key = self.get_s3_key(key)\n\t\tf = io.BytesIO()\n\t\ttry:\n\t\t\tself.s3.download_fileobj(self.bucket, s3_key, f)\n\t\texcept:\n\t\t\tf.close()\n\t\t\treturn default\n\t\tf.seek(0)\n\t\tdata = f.read()\n\t\tobj = self.deserialize(data)",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tf = io.BytesIO()\n\t\ttry:\n\t\t\tself.s3.download_fileobj(self.bucket, s3_key, f)\n\t\texcept:\n\t\t\tf.close()\n\t\t\treturn default\n\t\tf.seek(0)\n\t\tdata = f.read()\n\t\tobj = self.deserialize(data)\n\t\treturn obj",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tdata = f.read()\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef has(self, key):\n\t\ts3_key = self.get_s3_key(key)\n\t\ttry:\n\t\t\tself.s3.head_object(Bucket=self.bucket, Key=s3_key)\n\t\t\treturn True\n\t\texcept:\n\t\t\treturn False",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef has(self, key):\n\t\ts3_key = self.get_s3_key(key)\n\t\ttry:\n\t\t\tself.s3.head_object(Bucket=self.bucket, Key=s3_key)\n\t\t\treturn True\n\t\texcept:\n\t\t\treturn False\n\tdef delete(self, key):",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\ts3_key",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\ts3_key = self.get_s3_key(key)\n\t\ttry:\n\t\t\tself.s3.head_object(Bucket=self.bucket, Key=s3_key)\n\t\t\treturn True\n\t\texcept:\n\t\t\treturn False\n\tdef delete(self, key):\n\t\tself.s3.delete_object(\n\t\t\tBucket = self.bucket,\n\t\t\tKey = self.get_s3_key(key))",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\t\tBucket",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\t\tBucket = self.bucket,\n\t\t\tKey = self.get_s3_key(key))\ndef get_cache(**kw):\n\tmode = os.getenv('CACHE_MODE','').upper()\n\tpath = os.getenv('CACHE_PATH','')\n\tif mode == 'DISK':\n\t\treturn DiskCache(path)\n\telif mode == 'S3':\n\t\treturn S3Cache(**kw)\n\telse:",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t\t\tKey",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t\t\tKey = self.get_s3_key(key))\ndef get_cache(**kw):\n\tmode = os.getenv('CACHE_MODE','').upper()\n\tpath = os.getenv('CACHE_PATH','')\n\tif mode == 'DISK':\n\t\treturn DiskCache(path)\n\telif mode == 'S3':\n\t\treturn S3Cache(**kw)\n\telse:\n\t\treturn Cache()",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\tmode",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\tmode = os.getenv('CACHE_MODE','').upper()\n\tpath = os.getenv('CACHE_PATH','')\n\tif mode == 'DISK':\n\t\treturn DiskCache(path)\n\telif mode == 'S3':\n\t\treturn S3Cache(**kw)\n\telse:\n\t\treturn Cache()\nif __name__==\"__main__\":\n\t#cache = DiskCache('__pycache__')",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\tpath",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\tpath = os.getenv('CACHE_PATH','')\n\tif mode == 'DISK':\n\t\treturn DiskCache(path)\n\telif mode == 'S3':\n\t\treturn S3Cache(**kw)\n\telse:\n\t\treturn Cache()\nif __name__==\"__main__\":\n\t#cache = DiskCache('__pycache__')\n\tcache = S3Cache()",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\t#cache",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\t#cache = DiskCache('__pycache__')\n\tcache = S3Cache()\n\tcache.put('xxx',{'a':1,'b':22})\n\tprint('get xxx', cache.get('xxx'))\n\tprint('has xxx', cache.has('xxx'))\n\tprint('has yyy', cache.has('yyy'))\n\tprint('delete xxx', cache.delete('xxx'))\n\tprint('has xxx', cache.has('xxx'))\n\tprint('get xxx', cache.get('xxx'))\n\t#",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "\tcache",
        "kind": 5,
        "importPath": "src.cache",
        "description": "src.cache",
        "peekOfCode": "\tcache = S3Cache()\n\tcache.put('xxx',{'a':1,'b':22})\n\tprint('get xxx', cache.get('xxx'))\n\tprint('has xxx', cache.has('xxx'))\n\tprint('has yyy', cache.has('yyy'))\n\tprint('delete xxx', cache.delete('xxx'))\n\tprint('has xxx', cache.has('xxx'))\n\tprint('get xxx', cache.get('xxx'))\n\t#",
        "detail": "src.cache",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "src.css",
        "description": "src.css",
        "peekOfCode": "v1 = \"\"\"\n/* feedback checkbox */\n.css-18fuwiq {\n position: relative;\n padding-top: 6px;\n}\n.css-949r0i {\n position: relative;\n padding-top: 6px;\n}",
        "detail": "src.css",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "class Feedback:\n\t\"Dummy feedback adapter\"\n\tdef __init__(self, user):\n\t\t...\n\tdef send(self, score, ctx, details=False):\n\t\t...\n\tdef get_score(self):\n\t\treturn 0\nclass RedisFeedback(Feedback):\n\t\"Redis feedback adapter\"",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "RedisFeedback",
        "kind": 6,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "class RedisFeedback(Feedback):\n\t\"Redis feedback adapter\"\n\tdef __init__(self, user):\n\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')\n\t\tsuper().__init__(user)\n\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.user = user\n\t@retry(tries=5, delay=0.1)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "hexdigest",
        "kind": 2,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "def hexdigest(text):\n\treturn hashlib.md5(text.encode('utf8')).hexdigest()\ndef as_int(x):\n\treturn int(x) if x is not None else None\nclass Feedback:\n\t\"Dummy feedback adapter\"\n\tdef __init__(self, user):\n\t\t...\n\tdef send(self, score, ctx, details=False):\n\t\t...",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "as_int",
        "kind": 2,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "def as_int(x):\n\treturn int(x) if x is not None else None\nclass Feedback:\n\t\"Dummy feedback adapter\"\n\tdef __init__(self, user):\n\t\t...\n\tdef send(self, score, ctx, details=False):\n\t\t...\n\tdef get_score(self):\n\t\treturn 0",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "get_feedback_adapter",
        "kind": 2,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "def get_feedback_adapter(user):\n\tMODE = os.getenv('FEEDBACK_MODE','').upper()\n\tif MODE=='REDIS':\n\t\treturn RedisFeedback(user)\n\telse:\n\t\treturn Feedback(user)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tREDIS_URL",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')\n\t\tsuper().__init__(user)\n\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.user = user\n\t@retry(tries=5, delay=0.1)\n\tdef send(self, score, ctx, details=False):\n\t\tp = self.db.pipeline()\n\t\tdist_list = ctx.get('debug',{}).get('model.query.resp',{}).get('dist_list',[])",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tself.db",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.user = user\n\t@retry(tries=5, delay=0.1)\n\tdef send(self, score, ctx, details=False):\n\t\tp = self.db.pipeline()\n\t\tdist_list = ctx.get('debug',{}).get('model.query.resp',{}).get('dist_list',[])\n\t\t# feedback\n\t\tindex = ctx.get('index',{})\n\t\tdata = {}\n\t\tdata['user'] = self.user",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tself.user",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tself.user = user\n\t@retry(tries=5, delay=0.1)\n\tdef send(self, score, ctx, details=False):\n\t\tp = self.db.pipeline()\n\t\tdist_list = ctx.get('debug',{}).get('model.query.resp',{}).get('dist_list',[])\n\t\t# feedback\n\t\tindex = ctx.get('index',{})\n\t\tdata = {}\n\t\tdata['user'] = self.user\n\t\tdata['task-prompt-version'] = ctx.get('task_name')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tp",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tp = self.db.pipeline()\n\t\tdist_list = ctx.get('debug',{}).get('model.query.resp',{}).get('dist_list',[])\n\t\t# feedback\n\t\tindex = ctx.get('index',{})\n\t\tdata = {}\n\t\tdata['user'] = self.user\n\t\tdata['task-prompt-version'] = ctx.get('task_name')\n\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdist_list",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdist_list = ctx.get('debug',{}).get('model.query.resp',{}).get('dist_list',[])\n\t\t# feedback\n\t\tindex = ctx.get('index',{})\n\t\tdata = {}\n\t\tdata['user'] = self.user\n\t\tdata['task-prompt-version'] = ctx.get('task_name')\n\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tindex",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tindex = ctx.get('index',{})\n\t\tdata = {}\n\t\tdata['user'] = self.user\n\t\tdata['task-prompt-version'] = ctx.get('task_name')\n\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata = {}\n\t\tdata['user'] = self.user\n\t\tdata['task-prompt-version'] = ctx.get('task_name')\n\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['user']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['user'] = self.user\n\t\tdata['task-prompt-version'] = ctx.get('task_name')\n\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['task-prompt-version']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['task-prompt-version'] = ctx.get('task_name')\n\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['model']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['model'] = ctx.get('model')\n\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['model-embeddings']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['model-embeddings'] = ctx.get('model_embed')\n\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['task-prompt']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['task-prompt'] = ctx.get('task')\n\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['temperature']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['temperature'] = ctx.get('temperature')\n\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['frag-size']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['frag-size'] = ctx.get('frag_size')\n\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['frag-cnt']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['frag-cnt'] = ctx.get('max_frags')\n\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['frag-n-before']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['frag-n-before'] = ctx.get('n_frag_before')\n\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['frag-n-after']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['frag-n-after'] = ctx.get('n_frag_after')\n\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['filename']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['filename'] = ctx.get('filename')\n\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['filehash']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['filehash'] = index.get('hash') or index.get('filehash')\n\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['filesize']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['filesize'] = index.get('filesize')\n\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['n-pages']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['n-pages'] = index.get('n_pages')\n\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['n-texts']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['n-texts'] = index.get('n_texts')\n\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['use-hyde']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['use-hyde'] = as_int(ctx.get('use_hyde'))\n\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['use-hyde-summary']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['use-hyde-summary'] = as_int(ctx.get('use_hyde_summary'))\n\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['question']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['question'] = ctx.get('question')\n\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['answer']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['answer'] = ctx.get('answer')\n\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['hyde-summary']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['hyde-summary'] = index.get('summary')\n\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:\n\t\t\t\tdata[k] = ''",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['resp-dist-list']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['resp-dist-list'] = '|'.join([f\"{x:0.3f}\" for x in dist_list])\n\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:\n\t\t\t\tdata[k] = ''\n\t\tp.hset(key1, mapping=data)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tfb_hash",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tfb_hash = hexdigest(str(list(sorted(data.items()))))\n\t\t#\n\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:\n\t\t\t\tdata[k] = ''\n\t\tp.hset(key1, mapping=data)\n\t\t# feedback-daily",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['score']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['score'] = score\n\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:\n\t\t\t\tdata[k] = ''\n\t\tp.hset(key1, mapping=data)\n\t\t# feedback-daily\n\t\tdate = datetime.date.today()\n\t\tkey2 = f'feedback-daily:v1:{date}:{\"positive\" if score > 0 else \"negative\"}'",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdata['datetime']",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdata['datetime'] = str(datetime.datetime.now())\n\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:\n\t\t\t\tdata[k] = ''\n\t\tp.hset(key1, mapping=data)\n\t\t# feedback-daily\n\t\tdate = datetime.date.today()\n\t\tkey2 = f'feedback-daily:v1:{date}:{\"positive\" if score > 0 else \"negative\"}'\n\t\tp.sadd(key2, fb_hash)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tkey1",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tkey1 = f'feedback:v2:{fb_hash}'\n\t\tif not details:\n\t\t\tfor k in ['question','answer','hyde-summary']:\n\t\t\t\tdata[k] = ''\n\t\tp.hset(key1, mapping=data)\n\t\t# feedback-daily\n\t\tdate = datetime.date.today()\n\t\tkey2 = f'feedback-daily:v1:{date}:{\"positive\" if score > 0 else \"negative\"}'\n\t\tp.sadd(key2, fb_hash)\n\t\t# feedback-score",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata[k]",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\t\t\tdata[k] = ''\n\t\tp.hset(key1, mapping=data)\n\t\t# feedback-daily\n\t\tdate = datetime.date.today()\n\t\tkey2 = f'feedback-daily:v1:{date}:{\"positive\" if score > 0 else \"negative\"}'\n\t\tp.sadd(key2, fb_hash)\n\t\t# feedback-score\n\t\tkey3 = f'feedback-score:v2:{self.user}'\n\t\tp.sadd(key3, fb_hash)\n\t\tp.execute()",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tdate",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tdate = datetime.date.today()\n\t\tkey2 = f'feedback-daily:v1:{date}:{\"positive\" if score > 0 else \"negative\"}'\n\t\tp.sadd(key2, fb_hash)\n\t\t# feedback-score\n\t\tkey3 = f'feedback-score:v2:{self.user}'\n\t\tp.sadd(key3, fb_hash)\n\t\tp.execute()\n\t@retry(tries=5, delay=0.1)\n\tdef get_score(self):\n\t\tkey = f'feedback-score:v2:{self.user}'",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tkey2",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tkey2 = f'feedback-daily:v1:{date}:{\"positive\" if score > 0 else \"negative\"}'\n\t\tp.sadd(key2, fb_hash)\n\t\t# feedback-score\n\t\tkey3 = f'feedback-score:v2:{self.user}'\n\t\tp.sadd(key3, fb_hash)\n\t\tp.execute()\n\t@retry(tries=5, delay=0.1)\n\tdef get_score(self):\n\t\tkey = f'feedback-score:v2:{self.user}'\n\t\treturn self.db.scard(key)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tkey3",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tkey3 = f'feedback-score:v2:{self.user}'\n\t\tp.sadd(key3, fb_hash)\n\t\tp.execute()\n\t@retry(tries=5, delay=0.1)\n\tdef get_score(self):\n\t\tkey = f'feedback-score:v2:{self.user}'\n\t\treturn self.db.scard(key)\ndef get_feedback_adapter(user):\n\tMODE = os.getenv('FEEDBACK_MODE','').upper()\n\tif MODE=='REDIS':",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\t\tkey = f'feedback-score:v2:{self.user}'\n\t\treturn self.db.scard(key)\ndef get_feedback_adapter(user):\n\tMODE = os.getenv('FEEDBACK_MODE','').upper()\n\tif MODE=='REDIS':\n\t\treturn RedisFeedback(user)\n\telse:\n\t\treturn Feedback(user)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "\tMODE",
        "kind": 5,
        "importPath": "src.feedback",
        "description": "src.feedback",
        "peekOfCode": "\tMODE = os.getenv('FEEDBACK_MODE','').upper()\n\tif MODE=='REDIS':\n\t\treturn RedisFeedback(user)\n\telse:\n\t\treturn Feedback(user)",
        "detail": "src.feedback",
        "documentation": {}
    },
    {
        "label": "on_api_key_change",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def on_api_key_change():\n\tapi_key = ss.get('api_key') or os.getenv('OPENAI_KEY')\n\tmodel.use_key(api_key) # TODO: empty api_key\n\t#\n\tif 'data_dict' not in ss: ss['data_dict'] = {} # used only with DictStorage\n\tss['storage'] = storage.get_storage(api_key, data_dict=ss['data_dict'])\n\tss['cache'] = cache.get_cache()\n\tss['user'] = ss['storage'].folder # TODO: refactor user 'calculation' from get_storage\n\tmodel.set_user(ss['user'])\n\tss['feedback'] = feedback.get_feedback_adapter(ss['user'])",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_spacer",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_spacer(n=2, line=False, next_n=0):\n\tfor _ in range(n):\n\t\tst.write('')\n\tif line:\n\t\tst.tabs([' '])\n\tfor _ in range(next_n):\n\t\tst.write('')\ndef ui_info():\n\tst.markdown(f\"\"\"\n\t# Ask my PDF",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_info",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_info():\n\tst.markdown(f\"\"\"\n\t# Ask my PDF\n\tversion {__version__}\n\tQuestion answering system built on top of GPT3.\n\t\"\"\")\n\tui_spacer(1)\n\tst.write(\"Made by [Maciej Obarski](https://www.linkedin.com/in/mobarski/).\", unsafe_allow_html=True)\n\tui_spacer(1)\n\tst.markdown(\"\"\"",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_api_key",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_api_key():\n\tif ss['community_user']:\n\t\tst.write('## 1. Optional - enter your OpenAI API key')\n\t\tt1,t2 = st.tabs(['community version','enter your own API key'])\n\t\twith t1:\n\t\t\tpct = model.community_tokens_available_pct()\n\t\t\tst.write(f'Community tokens available: :{\"green\" if pct else \"red\"}[{int(pct)}%]')\n\t\t\tst.progress(pct/100)\n\t\t\tst.write('Refresh in: ' + model.community_tokens_refresh_in())\n\t\t\tst.write('You can sign up to OpenAI and/or create your API key [here](https://platform.openai.com/account/api-keys)')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "index_pdf_file",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def index_pdf_file():\n\tif ss['pdf_file']:\n\t\tss['filename'] = ss['pdf_file'].name\n\t\tif ss['filename'] != ss.get('fielname_done'): # UGLY\n\t\t\twith st.spinner(f'indexing {ss[\"filename\"]}'):\n\t\t\t\tindex = model.index_file(ss['pdf_file'], ss['filename'], fix_text=ss['fix_text'], frag_size=ss['frag_size'], cache=ss['cache'])\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\t\tss['filename_done'] = ss['filename'] # UGLY\ndef debug_index():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "debug_index",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def debug_index():\n\tindex = ss['index']\n\td = {}\n\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_pdf_file",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")\n\t\tb_save()\n\twith t2:\n\t\tfilenames = ['']\n\t\tif ss.get('storage'):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_show_debug",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_show_debug():\n\tst.checkbox('show debug section', key='show_debug')\ndef ui_fix_text():\n\tst.checkbox('fix common PDF problems', value=True, key='fix_text')\ndef ui_temperature():\n\t#st.slider('temperature', 0.0, 1.0, 0.0, 0.1, key='temperature', format='%0.1f')\n\tss['temperature'] = 0.0\ndef ui_fragments():\n\t#st.number_input('fragment size', 0,2000,200, step=100, key='frag_size')\n\tst.selectbox('fragment size (characters)', [0,200,300,400,500,600,700,800,900,1000], index=3, key='frag_size')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_fix_text",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_fix_text():\n\tst.checkbox('fix common PDF problems', value=True, key='fix_text')\ndef ui_temperature():\n\t#st.slider('temperature', 0.0, 1.0, 0.0, 0.1, key='temperature', format='%0.1f')\n\tss['temperature'] = 0.0\ndef ui_fragments():\n\t#st.number_input('fragment size', 0,2000,200, step=100, key='frag_size')\n\tst.selectbox('fragment size (characters)', [0,200,300,400,500,600,700,800,900,1000], index=3, key='frag_size')\n\tb_reindex()\n\tst.number_input('max fragments', 1, 10, 4, key='max_frags')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_temperature",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_temperature():\n\t#st.slider('temperature', 0.0, 1.0, 0.0, 0.1, key='temperature', format='%0.1f')\n\tss['temperature'] = 0.0\ndef ui_fragments():\n\t#st.number_input('fragment size', 0,2000,200, step=100, key='frag_size')\n\tst.selectbox('fragment size (characters)', [0,200,300,400,500,600,700,800,900,1000], index=3, key='frag_size')\n\tb_reindex()\n\tst.number_input('max fragments', 1, 10, 4, key='max_frags')\n\tst.number_input('fragments before', 0, 3, 1, key='n_frag_before') # TODO: pass to model\n\tst.number_input('fragments after',  0, 3, 1, key='n_frag_after')  # TODO: pass to model",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_fragments",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_fragments():\n\t#st.number_input('fragment size', 0,2000,200, step=100, key='frag_size')\n\tst.selectbox('fragment size (characters)', [0,200,300,400,500,600,700,800,900,1000], index=3, key='frag_size')\n\tb_reindex()\n\tst.number_input('max fragments', 1, 10, 4, key='max_frags')\n\tst.number_input('fragments before', 0, 3, 1, key='n_frag_before') # TODO: pass to model\n\tst.number_input('fragments after',  0, 3, 1, key='n_frag_after')  # TODO: pass to model\ndef ui_model():\n\tmodels = ['gpt-3.5-turbo','gpt-4','text-davinci-003','text-curie-001']\n\tst.selectbox('main model', models, key='model', disabled=not ss.get('api_key'))",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_model",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_model():\n\tmodels = ['gpt-3.5-turbo','gpt-4','text-davinci-003','text-curie-001']\n\tst.selectbox('main model', models, key='model', disabled=not ss.get('api_key'))\n\tst.selectbox('embedding model', ['text-embedding-ada-002'], key='model_embed') # FOR FUTURE USE\ndef ui_hyde():\n\tst.checkbox('use HyDE', value=True, key='use_hyde')\ndef ui_hyde_summary():\n\tst.checkbox('use summary in HyDE', value=True, key='use_hyde_summary')\ndef ui_task_template():\n\tst.selectbox('task prompt template', prompts.TASK.keys(), key='task_name')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_hyde",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_hyde():\n\tst.checkbox('use HyDE', value=True, key='use_hyde')\ndef ui_hyde_summary():\n\tst.checkbox('use summary in HyDE', value=True, key='use_hyde_summary')\ndef ui_task_template():\n\tst.selectbox('task prompt template', prompts.TASK.keys(), key='task_name')\ndef ui_task():\n\tx = ss['task_name']\n\tst.text_area('task prompt', prompts.TASK[x], key='task')\ndef ui_hyde_prompt():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_hyde_summary",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_hyde_summary():\n\tst.checkbox('use summary in HyDE', value=True, key='use_hyde_summary')\ndef ui_task_template():\n\tst.selectbox('task prompt template', prompts.TASK.keys(), key='task_name')\ndef ui_task():\n\tx = ss['task_name']\n\tst.text_area('task prompt', prompts.TASK[x], key='task')\ndef ui_hyde_prompt():\n\tst.text_area('HyDE prompt', prompts.HYDE, key='hyde_prompt')\ndef ui_question():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_task_template",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_task_template():\n\tst.selectbox('task prompt template', prompts.TASK.keys(), key='task_name')\ndef ui_task():\n\tx = ss['task_name']\n\tst.text_area('task prompt', prompts.TASK[x], key='task')\ndef ui_hyde_prompt():\n\tst.text_area('HyDE prompt', prompts.HYDE, key='hyde_prompt')\ndef ui_question():\n\tst.write('## 3. Ask questions'+(f' to {ss[\"filename\"]}' if ss.get('filename') else ''))\n\tdisabled = False",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_task",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_task():\n\tx = ss['task_name']\n\tst.text_area('task prompt', prompts.TASK[x], key='task')\ndef ui_hyde_prompt():\n\tst.text_area('HyDE prompt', prompts.HYDE, key='hyde_prompt')\ndef ui_question():\n\tst.write('## 3. Ask questions'+(f' to {ss[\"filename\"]}' if ss.get('filename') else ''))\n\tdisabled = False\n\tst.text_area('question', key='question', height=100, placeholder='Enter question here', help='', label_visibility=\"collapsed\", disabled=disabled)\n# REF: Hypotetical Document Embeddings",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_hyde_prompt",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_hyde_prompt():\n\tst.text_area('HyDE prompt', prompts.HYDE, key='hyde_prompt')\ndef ui_question():\n\tst.write('## 3. Ask questions'+(f' to {ss[\"filename\"]}' if ss.get('filename') else ''))\n\tdisabled = False\n\tst.text_area('question', key='question', height=100, placeholder='Enter question here', help='', label_visibility=\"collapsed\", disabled=disabled)\n# REF: Hypotetical Document Embeddings\ndef ui_hyde_answer():\n\t# TODO: enter or generate\n\tpass",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_question",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_question():\n\tst.write('## 3. Ask questions'+(f' to {ss[\"filename\"]}' if ss.get('filename') else ''))\n\tdisabled = False\n\tst.text_area('question', key='question', height=100, placeholder='Enter question here', help='', label_visibility=\"collapsed\", disabled=disabled)\n# REF: Hypotetical Document Embeddings\ndef ui_hyde_answer():\n\t# TODO: enter or generate\n\tpass\ndef ui_output():\n\toutput = ss.get('output','')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_hyde_answer",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_hyde_answer():\n\t# TODO: enter or generate\n\tpass\ndef ui_output():\n\toutput = ss.get('output','')\n\tst.markdown(output)\ndef ui_debug():\n\tif ss.get('show_debug'):\n\t\tst.write('### debug')\n\t\tst.write(ss.get('debug',{}))",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_output",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_output():\n\toutput = ss.get('output','')\n\tst.markdown(output)\ndef ui_debug():\n\tif ss.get('show_debug'):\n\t\tst.write('### debug')\n\t\tst.write(ss.get('debug',{}))\ndef b_ask():\n\tc1,c2,c3,c4,c5 = st.columns([2,1,1,2,2])\n\tif c2.button('👍', use_container_width=True, disabled=not ss.get('output')):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ui_debug",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def ui_debug():\n\tif ss.get('show_debug'):\n\t\tst.write('### debug')\n\t\tst.write(ss.get('debug',{}))\ndef b_ask():\n\tc1,c2,c3,c4,c5 = st.columns([2,1,1,2,2])\n\tif c2.button('👍', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(+1, ss, details=ss['send_details'])\n\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tif c3.button('👎', use_container_width=True, disabled=not ss.get('output')):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "b_ask",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def b_ask():\n\tc1,c2,c3,c4,c5 = st.columns([2,1,1,2,2])\n\tif c2.button('👍', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(+1, ss, details=ss['send_details'])\n\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tif c3.button('👎', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(-1, ss, details=ss['send_details'])\n\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tscore = ss.get('feedback_score',0)\n\tc5.write(f'feedback score: {score}')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "b_clear",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def b_clear():\n\tif st.button('clear output'):\n\t\tss['output'] = ''\ndef b_reindex():\n\t# TODO: disabled\n\tif st.button('reindex'):\n\t\tindex_pdf_file()\ndef b_reload():\n\tif st.button('reload prompts'):\n\t\timport importlib",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "b_reindex",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def b_reindex():\n\t# TODO: disabled\n\tif st.button('reindex'):\n\t\tindex_pdf_file()\ndef b_reload():\n\tif st.button('reload prompts'):\n\t\timport importlib\n\t\timportlib.reload(prompts)\ndef b_save():\n\tdb = ss.get('storage')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "b_reload",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def b_reload():\n\tif st.button('reload prompts'):\n\t\timport importlib\n\t\timportlib.reload(prompts)\ndef b_save():\n\tdb = ss.get('storage')\n\tindex = ss.get('index')\n\tname = ss.get('filename')\n\tapi_key = ss.get('api_key')\n\tdisabled = not api_key or not db or not index or not name",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "b_save",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def b_save():\n\tdb = ss.get('storage')\n\tindex = ss.get('index')\n\tname = ss.get('filename')\n\tapi_key = ss.get('api_key')\n\tdisabled = not api_key or not db or not index or not name\n\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "b_delete",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def b_delete():\n\tdb = ss.get('storage')\n\tname = ss.get('selected_file')\n\t# TODO: confirm delete\n\tif st.button('delete from ask-my-pdf', disabled=not db or not name):\n\t\twith st.spinner('deleting from ask-my-pdf'):\n\t\t\tdb.delete(name)\n\t\t#st.experimental_rerun()\ndef output_add(q,a):\n\tif 'output' not in ss: ss['output'] = ''",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "output_add",
        "kind": 2,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "def output_add(q,a):\n\tif 'output' not in ss: ss['output'] = ''\n\tq = q.replace('$',r'\\$')\n\ta = a.replace('$',r'\\$')\n\tnew = f'#### {q}\\n{a}\\n\\n'\n\tss['output'] = new + ss['output']\n# LAYOUT\nwith st.sidebar:\n\tui_info()\n\tui_spacer(2)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "__version__ = \"0.4.8.3\"\napp_name = \"Ask my PDF\"\n# BOILERPLATE\nimport streamlit as st\nst.set_page_config(layout='centered', page_title=f'{app_name} {__version__}')\nss = st.session_state\nif 'debug' not in ss: ss['debug'] = {}\nimport css\nst.write(f'<style>{css.v1}</style>', unsafe_allow_html=True)\nheader1 = st.empty() # for errors / messages",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "app_name = \"Ask my PDF\"\n# BOILERPLATE\nimport streamlit as st\nst.set_page_config(layout='centered', page_title=f'{app_name} {__version__}')\nss = st.session_state\nif 'debug' not in ss: ss['debug'] = {}\nimport css\nst.write(f'<style>{css.v1}</style>', unsafe_allow_html=True)\nheader1 = st.empty() # for errors / messages\nheader2 = st.empty() # for errors / messages",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ss",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "ss = st.session_state\nif 'debug' not in ss: ss['debug'] = {}\nimport css\nst.write(f'<style>{css.v1}</style>', unsafe_allow_html=True)\nheader1 = st.empty() # for errors / messages\nheader2 = st.empty() # for errors / messages\nheader3 = st.empty() # for errors / messages\n# IMPORTS\nimport prompts\nimport model",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "header1",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "header1 = st.empty() # for errors / messages\nheader2 = st.empty() # for errors / messages\nheader3 = st.empty() # for errors / messages\n# IMPORTS\nimport prompts\nimport model\nimport storage\nimport feedback\nimport cache\nimport os",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "header2",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "header2 = st.empty() # for errors / messages\nheader3 = st.empty() # for errors / messages\n# IMPORTS\nimport prompts\nimport model\nimport storage\nimport feedback\nimport cache\nimport os\nfrom time import time as now",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "header3",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "header3 = st.empty() # for errors / messages\n# IMPORTS\nimport prompts\nimport model\nimport storage\nimport feedback\nimport cache\nimport os\nfrom time import time as now\n# HANDLERS",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tapi_key",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tapi_key = ss.get('api_key') or os.getenv('OPENAI_KEY')\n\tmodel.use_key(api_key) # TODO: empty api_key\n\t#\n\tif 'data_dict' not in ss: ss['data_dict'] = {} # used only with DictStorage\n\tss['storage'] = storage.get_storage(api_key, data_dict=ss['data_dict'])\n\tss['cache'] = cache.get_cache()\n\tss['user'] = ss['storage'].folder # TODO: refactor user 'calculation' from get_storage\n\tmodel.set_user(ss['user'])\n\tss['feedback'] = feedback.get_feedback_adapter(ss['user'])\n\tss['feedback_score'] = ss['feedback'].get_score()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['storage']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['storage'] = storage.get_storage(api_key, data_dict=ss['data_dict'])\n\tss['cache'] = cache.get_cache()\n\tss['user'] = ss['storage'].folder # TODO: refactor user 'calculation' from get_storage\n\tmodel.set_user(ss['user'])\n\tss['feedback'] = feedback.get_feedback_adapter(ss['user'])\n\tss['feedback_score'] = ss['feedback'].get_score()\n\t#\n\tss['debug']['storage.folder'] = ss['storage'].folder\n\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['cache']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['cache'] = cache.get_cache()\n\tss['user'] = ss['storage'].folder # TODO: refactor user 'calculation' from get_storage\n\tmodel.set_user(ss['user'])\n\tss['feedback'] = feedback.get_feedback_adapter(ss['user'])\n\tss['feedback_score'] = ss['feedback'].get_score()\n\t#\n\tss['debug']['storage.folder'] = ss['storage'].folder\n\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['user']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['user'] = ss['storage'].folder # TODO: refactor user 'calculation' from get_storage\n\tmodel.set_user(ss['user'])\n\tss['feedback'] = feedback.get_feedback_adapter(ss['user'])\n\tss['feedback_score'] = ss['feedback'].get_score()\n\t#\n\tss['debug']['storage.folder'] = ss['storage'].folder\n\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:\n\ton_api_key_change() # use community key",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['feedback']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['feedback'] = feedback.get_feedback_adapter(ss['user'])\n\tss['feedback_score'] = ss['feedback'].get_score()\n\t#\n\tss['debug']['storage.folder'] = ss['storage'].folder\n\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:\n\ton_api_key_change() # use community key\n# COMPONENTS\ndef ui_spacer(n=2, line=False, next_n=0):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['feedback_score']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['feedback_score'] = ss['feedback'].get_score()\n\t#\n\tss['debug']['storage.folder'] = ss['storage'].folder\n\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:\n\ton_api_key_change() # use community key\n# COMPONENTS\ndef ui_spacer(n=2, line=False, next_n=0):\n\tfor _ in range(n):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['debug']['storage.folder']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['debug']['storage.folder'] = ss['storage'].folder\n\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:\n\ton_api_key_change() # use community key\n# COMPONENTS\ndef ui_spacer(n=2, line=False, next_n=0):\n\tfor _ in range(n):\n\t\tst.write('')\n\tif line:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['debug']['storage.class']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['debug']['storage.class'] = ss['storage'].__class__.__name__\nss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:\n\ton_api_key_change() # use community key\n# COMPONENTS\ndef ui_spacer(n=2, line=False, next_n=0):\n\tfor _ in range(n):\n\t\tst.write('')\n\tif line:\n\t\tst.tabs([' '])",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "ss['community_user']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "ss['community_user'] = os.getenv('COMMUNITY_USER')\nif 'user' not in ss and ss['community_user']:\n\ton_api_key_change() # use community key\n# COMPONENTS\ndef ui_spacer(n=2, line=False, next_n=0):\n\tfor _ in range(n):\n\t\tst.write('')\n\tif line:\n\t\tst.tabs([' '])\n\tfor _ in range(next_n):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tt1,t2",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tt1,t2 = st.tabs(['community version','enter your own API key'])\n\t\twith t1:\n\t\t\tpct = model.community_tokens_available_pct()\n\t\t\tst.write(f'Community tokens available: :{\"green\" if pct else \"red\"}[{int(pct)}%]')\n\t\t\tst.progress(pct/100)\n\t\t\tst.write('Refresh in: ' + model.community_tokens_refresh_in())\n\t\t\tst.write('You can sign up to OpenAI and/or create your API key [here](https://platform.openai.com/account/api-keys)')\n\t\t\tss['community_pct'] = pct\n\t\t\tss['debug']['community_pct'] = pct\n\t\twith t2:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\tpct",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\tpct = model.community_tokens_available_pct()\n\t\t\tst.write(f'Community tokens available: :{\"green\" if pct else \"red\"}[{int(pct)}%]')\n\t\t\tst.progress(pct/100)\n\t\t\tst.write('Refresh in: ' + model.community_tokens_refresh_in())\n\t\t\tst.write('You can sign up to OpenAI and/or create your API key [here](https://platform.openai.com/account/api-keys)')\n\t\t\tss['community_pct'] = pct\n\t\t\tss['debug']['community_pct'] = pct\n\t\twith t2:\n\t\t\tst.text_input('OpenAI API key', type='password', key='api_key', on_change=on_api_key_change, label_visibility=\"collapsed\")\n\telse:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\tss['community_pct']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\tss['community_pct'] = pct\n\t\t\tss['debug']['community_pct'] = pct\n\t\twith t2:\n\t\t\tst.text_input('OpenAI API key', type='password', key='api_key', on_change=on_api_key_change, label_visibility=\"collapsed\")\n\telse:\n\t\tst.write('## 1. Enter your OpenAI API key')\n\t\tst.text_input('OpenAI API key', type='password', key='api_key', on_change=on_api_key_change, label_visibility=\"collapsed\")\ndef index_pdf_file():\n\tif ss['pdf_file']:\n\t\tss['filename'] = ss['pdf_file'].name",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\tss['debug']['community_pct']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\tss['debug']['community_pct'] = pct\n\t\twith t2:\n\t\t\tst.text_input('OpenAI API key', type='password', key='api_key', on_change=on_api_key_change, label_visibility=\"collapsed\")\n\telse:\n\t\tst.write('## 1. Enter your OpenAI API key')\n\t\tst.text_input('OpenAI API key', type='password', key='api_key', on_change=on_api_key_change, label_visibility=\"collapsed\")\ndef index_pdf_file():\n\tif ss['pdf_file']:\n\t\tss['filename'] = ss['pdf_file'].name\n\t\tif ss['filename'] != ss.get('fielname_done'): # UGLY",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['filename']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['filename'] = ss['pdf_file'].name\n\t\tif ss['filename'] != ss.get('fielname_done'): # UGLY\n\t\t\twith st.spinner(f'indexing {ss[\"filename\"]}'):\n\t\t\t\tindex = model.index_file(ss['pdf_file'], ss['filename'], fix_text=ss['fix_text'], frag_size=ss['frag_size'], cache=ss['cache'])\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\t\tss['filename_done'] = ss['filename'] # UGLY\ndef debug_index():\n\tindex = ss['index']\n\td = {}",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tindex",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\tindex = model.index_file(ss['pdf_file'], ss['filename'], fix_text=ss['fix_text'], frag_size=ss['frag_size'], cache=ss['cache'])\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\t\tss['filename_done'] = ss['filename'] # UGLY\ndef debug_index():\n\tindex = ss['index']\n\td = {}\n\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tss['index']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\t\tss['filename_done'] = ss['filename'] # UGLY\ndef debug_index():\n\tindex = ss['index']\n\td = {}\n\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tss['filename_done']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\tss['filename_done'] = ss['filename'] # UGLY\ndef debug_index():\n\tindex = ss['index']\n\td = {}\n\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tindex",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tindex = ss['index']\n\td = {}\n\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td = {}\n\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['hash']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['hash'] = index['hash']\n\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['frag_size']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['frag_size'] = index['frag_size']\n\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['n_pages']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['n_pages'] = len(index['pages'])\n\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['n_texts']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['n_texts'] = len(index['texts'])\n\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['summary']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['summary'] = index['summary']\n\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['pages']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['pages'] = index['pages']\n\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['texts']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['texts'] = index['texts']\n\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")\n\t\tb_save()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\td['time']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\td['time'] = index.get('time',{})\n\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")\n\t\tb_save()\n\twith t2:",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['debug']['index']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['debug']['index'] = d\ndef ui_pdf_file():\n\tst.write('## 2. Upload or select your PDF file')\n\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")\n\t\tb_save()\n\twith t2:\n\t\tfilenames = ['']",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tdisabled",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tdisabled = not ss.get('user') or (not ss.get('api_key') and not ss.get('community_pct',0))\n\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")\n\t\tb_save()\n\twith t2:\n\t\tfilenames = ['']\n\t\tif ss.get('storage'):\n\t\t\tfilenames += ss['storage'].list()\n\t\tdef on_change():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tt1,t2",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tt1,t2 = st.tabs(['UPLOAD','SELECT'])\n\twith t1:\n\t\tst.file_uploader('pdf file', type='pdf', key='pdf_file', disabled=disabled, on_change=index_pdf_file, label_visibility=\"collapsed\")\n\t\tb_save()\n\twith t2:\n\t\tfilenames = ['']\n\t\tif ss.get('storage'):\n\t\t\tfilenames += ss['storage'].list()\n\t\tdef on_change():\n\t\t\tname = ss['selected_file']",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tfilenames",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tfilenames = ['']\n\t\tif ss.get('storage'):\n\t\t\tfilenames += ss['storage'].list()\n\t\tdef on_change():\n\t\t\tname = ss['selected_file']\n\t\t\tif name and ss.get('storage'):\n\t\t\t\twith ss['spin_select_file']:\n\t\t\t\t\twith st.spinner('loading index'):\n\t\t\t\t\t\tt0 = now()\n\t\t\t\t\t\tindex = ss['storage'].get(name)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\tname",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\tname = ss['selected_file']\n\t\t\tif name and ss.get('storage'):\n\t\t\t\twith ss['spin_select_file']:\n\t\t\t\t\twith st.spinner('loading index'):\n\t\t\t\t\t\tt0 = now()\n\t\t\t\t\t\tindex = ss['storage'].get(name)\n\t\t\t\t\t\tss['debug']['storage_get_time'] = now()-t0\n\t\t\t\tss['filename'] = name # XXX\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tt0",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\t\t\tt0 = now()\n\t\t\t\t\t\tindex = ss['storage'].get(name)\n\t\t\t\t\t\tss['debug']['storage_get_time'] = now()-t0\n\t\t\t\tss['filename'] = name # XXX\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\telse:\n\t\t\t\t#ss['index'] = {}\n\t\t\t\tpass\n\t\tst.selectbox('select file', filenames, on_change=on_change, key='selected_file', label_visibility=\"collapsed\", disabled=disabled)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tindex",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\t\t\tindex = ss['storage'].get(name)\n\t\t\t\t\t\tss['debug']['storage_get_time'] = now()-t0\n\t\t\t\tss['filename'] = name # XXX\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\telse:\n\t\t\t\t#ss['index'] = {}\n\t\t\t\tpass\n\t\tst.selectbox('select file', filenames, on_change=on_change, key='selected_file', label_visibility=\"collapsed\", disabled=disabled)\n\t\tb_delete()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tss['debug']['storage_get_time']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\t\t\tss['debug']['storage_get_time'] = now()-t0\n\t\t\t\tss['filename'] = name # XXX\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\telse:\n\t\t\t\t#ss['index'] = {}\n\t\t\t\tpass\n\t\tst.selectbox('select file', filenames, on_change=on_change, key='selected_file', label_visibility=\"collapsed\", disabled=disabled)\n\t\tb_delete()\n\t\tss['spin_select_file'] = st.empty()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tss['filename']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\tss['filename'] = name # XXX\n\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\telse:\n\t\t\t\t#ss['index'] = {}\n\t\t\t\tpass\n\t\tst.selectbox('select file', filenames, on_change=on_change, key='selected_file', label_visibility=\"collapsed\", disabled=disabled)\n\t\tb_delete()\n\t\tss['spin_select_file'] = st.empty()\ndef ui_show_debug():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tss['index']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\tss['index'] = index\n\t\t\t\tdebug_index()\n\t\t\telse:\n\t\t\t\t#ss['index'] = {}\n\t\t\t\tpass\n\t\tst.selectbox('select file', filenames, on_change=on_change, key='selected_file', label_visibility=\"collapsed\", disabled=disabled)\n\t\tb_delete()\n\t\tss['spin_select_file'] = st.empty()\ndef ui_show_debug():\n\tst.checkbox('show debug section', key='show_debug')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t#ss['index']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\t\t#ss['index'] = {}\n\t\t\t\tpass\n\t\tst.selectbox('select file', filenames, on_change=on_change, key='selected_file', label_visibility=\"collapsed\", disabled=disabled)\n\t\tb_delete()\n\t\tss['spin_select_file'] = st.empty()\ndef ui_show_debug():\n\tst.checkbox('show debug section', key='show_debug')\ndef ui_fix_text():\n\tst.checkbox('fix common PDF problems', value=True, key='fix_text')\ndef ui_temperature():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['spin_select_file']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['spin_select_file'] = st.empty()\ndef ui_show_debug():\n\tst.checkbox('show debug section', key='show_debug')\ndef ui_fix_text():\n\tst.checkbox('fix common PDF problems', value=True, key='fix_text')\ndef ui_temperature():\n\t#st.slider('temperature', 0.0, 1.0, 0.0, 0.1, key='temperature', format='%0.1f')\n\tss['temperature'] = 0.0\ndef ui_fragments():\n\t#st.number_input('fragment size', 0,2000,200, step=100, key='frag_size')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['temperature']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['temperature'] = 0.0\ndef ui_fragments():\n\t#st.number_input('fragment size', 0,2000,200, step=100, key='frag_size')\n\tst.selectbox('fragment size (characters)', [0,200,300,400,500,600,700,800,900,1000], index=3, key='frag_size')\n\tb_reindex()\n\tst.number_input('max fragments', 1, 10, 4, key='max_frags')\n\tst.number_input('fragments before', 0, 3, 1, key='n_frag_before') # TODO: pass to model\n\tst.number_input('fragments after',  0, 3, 1, key='n_frag_after')  # TODO: pass to model\ndef ui_model():\n\tmodels = ['gpt-3.5-turbo','gpt-4','text-davinci-003','text-curie-001']",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tmodels",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tmodels = ['gpt-3.5-turbo','gpt-4','text-davinci-003','text-curie-001']\n\tst.selectbox('main model', models, key='model', disabled=not ss.get('api_key'))\n\tst.selectbox('embedding model', ['text-embedding-ada-002'], key='model_embed') # FOR FUTURE USE\ndef ui_hyde():\n\tst.checkbox('use HyDE', value=True, key='use_hyde')\ndef ui_hyde_summary():\n\tst.checkbox('use summary in HyDE', value=True, key='use_hyde_summary')\ndef ui_task_template():\n\tst.selectbox('task prompt template', prompts.TASK.keys(), key='task_name')\ndef ui_task():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tx = ss['task_name']\n\tst.text_area('task prompt', prompts.TASK[x], key='task')\ndef ui_hyde_prompt():\n\tst.text_area('HyDE prompt', prompts.HYDE, key='hyde_prompt')\ndef ui_question():\n\tst.write('## 3. Ask questions'+(f' to {ss[\"filename\"]}' if ss.get('filename') else ''))\n\tdisabled = False\n\tst.text_area('question', key='question', height=100, placeholder='Enter question here', help='', label_visibility=\"collapsed\", disabled=disabled)\n# REF: Hypotetical Document Embeddings\ndef ui_hyde_answer():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tdisabled",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tdisabled = False\n\tst.text_area('question', key='question', height=100, placeholder='Enter question here', help='', label_visibility=\"collapsed\", disabled=disabled)\n# REF: Hypotetical Document Embeddings\ndef ui_hyde_answer():\n\t# TODO: enter or generate\n\tpass\ndef ui_output():\n\toutput = ss.get('output','')\n\tst.markdown(output)\ndef ui_debug():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\toutput",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\toutput = ss.get('output','')\n\tst.markdown(output)\ndef ui_debug():\n\tif ss.get('show_debug'):\n\t\tst.write('### debug')\n\t\tst.write(ss.get('debug',{}))\ndef b_ask():\n\tc1,c2,c3,c4,c5 = st.columns([2,1,1,2,2])\n\tif c2.button('👍', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(+1, ss, details=ss['send_details'])",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tc1,c2,c3,c4,c5",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tc1,c2,c3,c4,c5 = st.columns([2,1,1,2,2])\n\tif c2.button('👍', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(+1, ss, details=ss['send_details'])\n\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tif c3.button('👎', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(-1, ss, details=ss['send_details'])\n\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tscore = ss.get('feedback_score',0)\n\tc5.write(f'feedback score: {score}')\n\tc4.checkbox('send details', True, key='send_details',",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['feedback_score']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tif c3.button('👎', use_container_width=True, disabled=not ss.get('output')):\n\t\tss['feedback'].send(-1, ss, details=ss['send_details'])\n\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tscore = ss.get('feedback_score',0)\n\tc5.write(f'feedback score: {score}')\n\tc4.checkbox('send details', True, key='send_details',\n\t\t\thelp='allow question and the answer to be stored in the ask-my-pdf feedback database')\n\t#c1,c2,c3 = st.columns([1,3,1])\n\t#c2.radio('zzz',['👍',r'...',r'👎'],horizontal=True,label_visibility=\"collapsed\")",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['feedback_score']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['feedback_score'] = ss['feedback'].get_score()\n\tscore = ss.get('feedback_score',0)\n\tc5.write(f'feedback score: {score}')\n\tc4.checkbox('send details', True, key='send_details',\n\t\t\thelp='allow question and the answer to be stored in the ask-my-pdf feedback database')\n\t#c1,c2,c3 = st.columns([1,3,1])\n\t#c2.radio('zzz',['👍',r'...',r'👎'],horizontal=True,label_visibility=\"collapsed\")\n\t#\n\tdisabled = (not ss.get('api_key') and not ss.get('community_pct',0)) or not ss.get('index')\n\tif c1.button('get answer', disabled=disabled, type='primary', use_container_width=True):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tscore",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tscore = ss.get('feedback_score',0)\n\tc5.write(f'feedback score: {score}')\n\tc4.checkbox('send details', True, key='send_details',\n\t\t\thelp='allow question and the answer to be stored in the ask-my-pdf feedback database')\n\t#c1,c2,c3 = st.columns([1,3,1])\n\t#c2.radio('zzz',['👍',r'...',r'👎'],horizontal=True,label_visibility=\"collapsed\")\n\t#\n\tdisabled = (not ss.get('api_key') and not ss.get('community_pct',0)) or not ss.get('index')\n\tif c1.button('get answer', disabled=disabled, type='primary', use_container_width=True):\n\t\tquestion = ss.get('question','')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t#c1,c2,c3",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t#c1,c2,c3 = st.columns([1,3,1])\n\t#c2.radio('zzz',['👍',r'...',r'👎'],horizontal=True,label_visibility=\"collapsed\")\n\t#\n\tdisabled = (not ss.get('api_key') and not ss.get('community_pct',0)) or not ss.get('index')\n\tif c1.button('get answer', disabled=disabled, type='primary', use_container_width=True):\n\t\tquestion = ss.get('question','')\n\t\ttemperature = ss.get('temperature', 0.0)\n\t\thyde = ss.get('use_hyde')\n\t\thyde_prompt = ss.get('hyde_prompt')\n\t\tif ss.get('use_hyde_summary'):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tdisabled",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tdisabled = (not ss.get('api_key') and not ss.get('community_pct',0)) or not ss.get('index')\n\tif c1.button('get answer', disabled=disabled, type='primary', use_container_width=True):\n\t\tquestion = ss.get('question','')\n\t\ttemperature = ss.get('temperature', 0.0)\n\t\thyde = ss.get('use_hyde')\n\t\thyde_prompt = ss.get('hyde_prompt')\n\t\tif ss.get('use_hyde_summary'):\n\t\t\tsummary = ss['index']['summary']\n\t\t\thyde_prompt += f\" Context: {summary}\\n\\n\"\n\t\ttask = ss.get('task')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tquestion",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tquestion = ss.get('question','')\n\t\ttemperature = ss.get('temperature', 0.0)\n\t\thyde = ss.get('use_hyde')\n\t\thyde_prompt = ss.get('hyde_prompt')\n\t\tif ss.get('use_hyde_summary'):\n\t\t\tsummary = ss['index']['summary']\n\t\t\thyde_prompt += f\" Context: {summary}\\n\\n\"\n\t\ttask = ss.get('task')\n\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\ttemperature",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\ttemperature = ss.get('temperature', 0.0)\n\t\thyde = ss.get('use_hyde')\n\t\thyde_prompt = ss.get('hyde_prompt')\n\t\tif ss.get('use_hyde_summary'):\n\t\t\tsummary = ss['index']['summary']\n\t\t\thyde_prompt += f\" Context: {summary}\\n\\n\"\n\t\ttask = ss.get('task')\n\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\thyde",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\thyde = ss.get('use_hyde')\n\t\thyde_prompt = ss.get('hyde_prompt')\n\t\tif ss.get('use_hyde_summary'):\n\t\t\tsummary = ss['index']['summary']\n\t\t\thyde_prompt += f\" Context: {summary}\\n\\n\"\n\t\ttask = ss.get('task')\n\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)\n\t\tindex = ss.get('index',{})",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\thyde_prompt",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\thyde_prompt = ss.get('hyde_prompt')\n\t\tif ss.get('use_hyde_summary'):\n\t\t\tsummary = ss['index']['summary']\n\t\t\thyde_prompt += f\" Context: {summary}\\n\\n\"\n\t\ttask = ss.get('task')\n\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)\n\t\tindex = ss.get('index',{})\n\t\twith st.spinner('preparing answer'):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\tsummary",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\tsummary = ss['index']['summary']\n\t\t\thyde_prompt += f\" Context: {summary}\\n\\n\"\n\t\ttask = ss.get('task')\n\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)\n\t\tindex = ss.get('index',{})\n\t\twith st.spinner('preparing answer'):\n\t\t\tresp = model.query(question, index,\n\t\t\t\t\ttask=task,",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\ttask",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\ttask = ss.get('task')\n\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)\n\t\tindex = ss.get('index',{})\n\t\twith st.spinner('preparing answer'):\n\t\t\tresp = model.query(question, index,\n\t\t\t\t\ttask=task,\n\t\t\t\t\ttemperature=temperature,\n\t\t\t\t\thyde=hyde,",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tmax_frags",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tmax_frags = ss.get('max_frags',1)\n\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)\n\t\tindex = ss.get('index',{})\n\t\twith st.spinner('preparing answer'):\n\t\t\tresp = model.query(question, index,\n\t\t\t\t\ttask=task,\n\t\t\t\t\ttemperature=temperature,\n\t\t\t\t\thyde=hyde,\n\t\t\t\t\thyde_prompt=hyde_prompt,",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tn_before",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tn_before = ss.get('n_frag_before',0)\n\t\tn_after  = ss.get('n_frag_after',0)\n\t\tindex = ss.get('index',{})\n\t\twith st.spinner('preparing answer'):\n\t\t\tresp = model.query(question, index,\n\t\t\t\t\ttask=task,\n\t\t\t\t\ttemperature=temperature,\n\t\t\t\t\thyde=hyde,\n\t\t\t\t\thyde_prompt=hyde_prompt,\n\t\t\t\t\tmax_frags=max_frags,",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tindex",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tindex = ss.get('index',{})\n\t\twith st.spinner('preparing answer'):\n\t\t\tresp = model.query(question, index,\n\t\t\t\t\ttask=task,\n\t\t\t\t\ttemperature=temperature,\n\t\t\t\t\thyde=hyde,\n\t\t\t\t\thyde_prompt=hyde_prompt,\n\t\t\t\t\tmax_frags=max_frags,\n\t\t\t\t\tlimit=max_frags+2,\n\t\t\t\t\tn_before=n_before,",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\t\tresp",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\t\tresp = model.query(question, index,\n\t\t\t\t\ttask=task,\n\t\t\t\t\ttemperature=temperature,\n\t\t\t\t\thyde=hyde,\n\t\t\t\t\thyde_prompt=hyde_prompt,\n\t\t\t\t\tmax_frags=max_frags,\n\t\t\t\t\tlimit=max_frags+2,\n\t\t\t\t\tn_before=n_before,\n\t\t\t\t\tn_after=n_after,\n\t\t\t\t\tmodel=ss['model'],",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tusage",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tusage = resp.get('usage',{})\n\t\tusage['cnt'] = 1\n\t\tss['debug']['model.query.resp'] = resp\n\t\tss['debug']['resp.usage'] = usage\n\t\tss['debug']['model.vector_query_time'] = resp['vector_query_time']\n\t\tq = question.strip()\n\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tusage['cnt']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tusage['cnt'] = 1\n\t\tss['debug']['model.query.resp'] = resp\n\t\tss['debug']['resp.usage'] = usage\n\t\tss['debug']['model.vector_query_time'] = resp['vector_query_time']\n\t\tq = question.strip()\n\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['debug']['model.query.resp']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['debug']['model.query.resp'] = resp\n\t\tss['debug']['resp.usage'] = usage\n\t\tss['debug']['model.vector_query_time'] = resp['vector_query_time']\n\t\tq = question.strip()\n\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():\n\tif st.button('clear output'):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['debug']['resp.usage']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['debug']['resp.usage'] = usage\n\t\tss['debug']['model.vector_query_time'] = resp['vector_query_time']\n\t\tq = question.strip()\n\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():\n\tif st.button('clear output'):\n\t\tss['output'] = ''",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['debug']['model.vector_query_time']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['debug']['model.vector_query_time'] = resp['vector_query_time']\n\t\tq = question.strip()\n\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():\n\tif st.button('clear output'):\n\t\tss['output'] = ''\ndef b_reindex():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tq",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tq = question.strip()\n\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():\n\tif st.button('clear output'):\n\t\tss['output'] = ''\ndef b_reindex():\n\t# TODO: disabled",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\ta = resp['text'].strip()\n\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():\n\tif st.button('clear output'):\n\t\tss['output'] = ''\ndef b_reindex():\n\t# TODO: disabled\n\tif st.button('reindex'):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['answer']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['answer'] = a\n\t\toutput_add(q,a)\n\t\tst.experimental_rerun() # to enable the feedback buttons\ndef b_clear():\n\tif st.button('clear output'):\n\t\tss['output'] = ''\ndef b_reindex():\n\t# TODO: disabled\n\tif st.button('reindex'):\n\t\tindex_pdf_file()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\t\tss['output']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\t\tss['output'] = ''\ndef b_reindex():\n\t# TODO: disabled\n\tif st.button('reindex'):\n\t\tindex_pdf_file()\ndef b_reload():\n\tif st.button('reload prompts'):\n\t\timport importlib\n\t\timportlib.reload(prompts)\ndef b_save():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tdb",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tdb = ss.get('storage')\n\tindex = ss.get('index')\n\tname = ss.get('filename')\n\tapi_key = ss.get('api_key')\n\tdisabled = not api_key or not db or not index or not name\n\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)\ndef b_delete():",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tindex",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tindex = ss.get('index')\n\tname = ss.get('filename')\n\tapi_key = ss.get('api_key')\n\tdisabled = not api_key or not db or not index or not name\n\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)\ndef b_delete():\n\tdb = ss.get('storage')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tname = ss.get('filename')\n\tapi_key = ss.get('api_key')\n\tdisabled = not api_key or not db or not index or not name\n\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)\ndef b_delete():\n\tdb = ss.get('storage')\n\tname = ss.get('selected_file')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tapi_key",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tapi_key = ss.get('api_key')\n\tdisabled = not api_key or not db or not index or not name\n\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)\ndef b_delete():\n\tdb = ss.get('storage')\n\tname = ss.get('selected_file')\n\t# TODO: confirm delete",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tdisabled",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tdisabled = not api_key or not db or not index or not name\n\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)\ndef b_delete():\n\tdb = ss.get('storage')\n\tname = ss.get('selected_file')\n\t# TODO: confirm delete\n\tif st.button('delete from ask-my-pdf', disabled=not db or not name):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\thelp",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\thelp = \"The file will be stored for about 90 days. Available only when using your own API key.\"\n\tif st.button('save encrypted index in ask-my-pdf', disabled=disabled, help=help):\n\t\twith st.spinner('saving to ask-my-pdf'):\n\t\t\tdb.put(name, index)\ndef b_delete():\n\tdb = ss.get('storage')\n\tname = ss.get('selected_file')\n\t# TODO: confirm delete\n\tif st.button('delete from ask-my-pdf', disabled=not db or not name):\n\t\twith st.spinner('deleting from ask-my-pdf'):",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tdb",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tdb = ss.get('storage')\n\tname = ss.get('selected_file')\n\t# TODO: confirm delete\n\tif st.button('delete from ask-my-pdf', disabled=not db or not name):\n\t\twith st.spinner('deleting from ask-my-pdf'):\n\t\t\tdb.delete(name)\n\t\t#st.experimental_rerun()\ndef output_add(q,a):\n\tif 'output' not in ss: ss['output'] = ''\n\tq = q.replace('$',r'\\$')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tname = ss.get('selected_file')\n\t# TODO: confirm delete\n\tif st.button('delete from ask-my-pdf', disabled=not db or not name):\n\t\twith st.spinner('deleting from ask-my-pdf'):\n\t\t\tdb.delete(name)\n\t\t#st.experimental_rerun()\ndef output_add(q,a):\n\tif 'output' not in ss: ss['output'] = ''\n\tq = q.replace('$',r'\\$')\n\ta = a.replace('$',r'\\$')",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tq",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tq = q.replace('$',r'\\$')\n\ta = a.replace('$',r'\\$')\n\tnew = f'#### {q}\\n{a}\\n\\n'\n\tss['output'] = new + ss['output']\n# LAYOUT\nwith st.sidebar:\n\tui_info()\n\tui_spacer(2)\n\twith st.expander('advanced'):\n\t\tui_show_debug()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\ta",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\ta = a.replace('$',r'\\$')\n\tnew = f'#### {q}\\n{a}\\n\\n'\n\tss['output'] = new + ss['output']\n# LAYOUT\nwith st.sidebar:\n\tui_info()\n\tui_spacer(2)\n\twith st.expander('advanced'):\n\t\tui_show_debug()\n\t\tb_clear()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tnew",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tnew = f'#### {q}\\n{a}\\n\\n'\n\tss['output'] = new + ss['output']\n# LAYOUT\nwith st.sidebar:\n\tui_info()\n\tui_spacer(2)\n\twith st.expander('advanced'):\n\t\tui_show_debug()\n\t\tb_clear()\n\t\tui_model()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "\tss['output']",
        "kind": 5,
        "importPath": "src.gui",
        "description": "src.gui",
        "peekOfCode": "\tss['output'] = new + ss['output']\n# LAYOUT\nwith st.sidebar:\n\tui_info()\n\tui_spacer(2)\n\twith st.expander('advanced'):\n\t\tui_show_debug()\n\t\tb_clear()\n\t\tui_model()\n\t\tui_fragments()",
        "detail": "src.gui",
        "documentation": {}
    },
    {
        "label": "use_key",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def use_key(api_key):\n\tai.use_key(api_key)\ndef set_user(user):\n\tai.set_user(user)\ndef query_by_vector(vector, index, limit=None):\n\t\"return (ids, distances and texts) sorted by cosine distance\"\n\tvectors = index['vectors']\n\ttexts = index['texts']\n\t#\n\tsim = cosine_distances([vector], vectors)[0]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "set_user",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def set_user(user):\n\tai.set_user(user)\ndef query_by_vector(vector, index, limit=None):\n\t\"return (ids, distances and texts) sorted by cosine distance\"\n\tvectors = index['vectors']\n\ttexts = index['texts']\n\t#\n\tsim = cosine_distances([vector], vectors)[0]\n\t#\n\tid_dist_list = list(enumerate(sim))",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "query_by_vector",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def query_by_vector(vector, index, limit=None):\n\t\"return (ids, distances and texts) sorted by cosine distance\"\n\tvectors = index['vectors']\n\ttexts = index['texts']\n\t#\n\tsim = cosine_distances([vector], vectors)[0]\n\t#\n\tid_dist_list = list(enumerate(sim))\n\tid_dist_list.sort(key=lambda x:x[1])\n\tid_list   = [x[0] for x in id_dist_list][:limit]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "get_vectors",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def get_vectors(text_list):\n\t\"transform texts into embedding vectors\"\n\tbatch_size = 128\n\tvectors = []\n\tusage = Counter()\n\tfor i,texts in enumerate(batch(text_list, batch_size)):\n\t\tresp = ai.embeddings(texts)\n\t\tv = resp['vectors']\n\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "index_file",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def index_file(f, filename, fix_text=False, frag_size=0, cache=None):\n\t\"return vector index (dictionary) for a given PDF file\"\n\t# calc md5\n\th = hashlib.md5()\n\th.update(f.read())\n\tmd5 = h.hexdigest()\n\tfilesize = f.tell()\n\tf.seek(0)\n\t#\n\tt0 = now()",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "split_pages_into_fragments",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def split_pages_into_fragments(pages, frag_size):\n\t\"split pages (list of texts) into smaller fragments (list of texts)\"\n\tpage_offset = [0]\n\tfor p,page in enumerate(pages):\n\t\tpage_offset += [page_offset[-1]+len(page)+1]\n\t# TODO: del page_offset[-1] ???\n\tif frag_size:\n\t\ttext = ' '.join(pages)\n\t\treturn text_to_fragments(text, frag_size, page_offset)\n\telse:",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "text_to_fragments",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def text_to_fragments(text, size, page_offset):\n\t\"split single text into smaller fragments (list of texts)\"\n\tif size and len(text)>size:\n\t\tout = []\n\t\tpos = 0\n\t\tpage = 1\n\t\tp_off = page_offset.copy()[1:]\n\t\teos = find_eos(text)\n\t\tif len(text) not in eos:\n\t\t\teos += [len(text)]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "find_eos",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def find_eos(text):\n\t\"return list of all end-of-sentence offsets\"\n\treturn [x.span()[1] for x in re.finditer('[.!?。]\\s+',text)]\n###############################################################################\ndef fix_text_problems(text):\n\t\"fix common text problems\"\n\ttext = re.sub('\\s+[-]\\s+','',text) # word continuation in the next line\n\treturn text\ndef query(text, index, task=None, temperature=0.0, max_frags=1, hyde=False, hyde_prompt=None, limit=None, n_before=1, n_after=1, model=None):\n\t\"get dictionary with the answer for the given question (text).\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "fix_text_problems",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def fix_text_problems(text):\n\t\"fix common text problems\"\n\ttext = re.sub('\\s+[-]\\s+','',text) # word continuation in the next line\n\treturn text\ndef query(text, index, task=None, temperature=0.0, max_frags=1, hyde=False, hyde_prompt=None, limit=None, n_before=1, n_after=1, model=None):\n\t\"get dictionary with the answer for the given question (text).\"\n\tout = {}\n\tif hyde:\n\t\t# TODO: model param\n\t\tout['hyde'] = hypotetical_answer(text, index, hyde_prompt=hyde_prompt, temperature=temperature)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def query(text, index, task=None, temperature=0.0, max_frags=1, hyde=False, hyde_prompt=None, limit=None, n_before=1, n_after=1, model=None):\n\t\"get dictionary with the answer for the given question (text).\"\n\tout = {}\n\tif hyde:\n\t\t# TODO: model param\n\t\tout['hyde'] = hypotetical_answer(text, index, hyde_prompt=hyde_prompt, temperature=temperature)\n\t\t# TODO: usage\n\t# RANK FRAGMENTS\n\tif hyde:\n\t\tresp = ai.embedding(out['hyde']['text'])",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "hypotetical_answer",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"\n\thyde_prompt = hyde_prompt or 'Write document that answers the question.'\n\tprompt = f\"\"\"\n\t{hyde_prompt}\n\tQuestion: \"{text}\"\n\tDocument:\"\"\" # TODO: move to prompts.py\n\tresp = ai.complete(prompt, temperature=temperature)\n\treturn resp\ndef community_tokens_available_pct():",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "community_tokens_available_pct",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def community_tokens_available_pct():\n\tused = ai.get_community_usage_cost()\n\tlimit = float(os.getenv('COMMUNITY_DAILY_USD',0))\n\tpct = (100.0 * (limit-used) / limit) if limit else 0\n\tpct = max(0, pct)\n\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "community_tokens_refresh_in",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util\ndef batch(data, n):\n\tfor i in range(0, len(data), n):\n\t\tyield data[i:i+n]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "batch",
        "kind": 2,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "def batch(data, n):\n\tfor i in range(0, len(data), n):\n\t\tyield data[i:i+n]\nif __name__==\"__main__\":\n\tprint(text_to_fragments(\"to jest. test tego. programu\", size=3, page_offset=[0,5,10,15,20]))",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tvectors",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tvectors = index['vectors']\n\ttexts = index['texts']\n\t#\n\tsim = cosine_distances([vector], vectors)[0]\n\t#\n\tid_dist_list = list(enumerate(sim))\n\tid_dist_list.sort(key=lambda x:x[1])\n\tid_list   = [x[0] for x in id_dist_list][:limit]\n\tdist_list = [x[1] for x in id_dist_list][:limit]\n\ttext_list = [texts[x] for x in id_list] if texts else ['ERROR']*len(id_list)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\ttexts",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\ttexts = index['texts']\n\t#\n\tsim = cosine_distances([vector], vectors)[0]\n\t#\n\tid_dist_list = list(enumerate(sim))\n\tid_dist_list.sort(key=lambda x:x[1])\n\tid_list   = [x[0] for x in id_dist_list][:limit]\n\tdist_list = [x[1] for x in id_dist_list][:limit]\n\ttext_list = [texts[x] for x in id_list] if texts else ['ERROR']*len(id_list)\n\treturn id_list, dist_list, text_list",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tsim",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tsim = cosine_distances([vector], vectors)[0]\n\t#\n\tid_dist_list = list(enumerate(sim))\n\tid_dist_list.sort(key=lambda x:x[1])\n\tid_list   = [x[0] for x in id_dist_list][:limit]\n\tdist_list = [x[1] for x in id_dist_list][:limit]\n\ttext_list = [texts[x] for x in id_list] if texts else ['ERROR']*len(id_list)\n\treturn id_list, dist_list, text_list\ndef get_vectors(text_list):\n\t\"transform texts into embedding vectors\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tid_dist_list",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tid_dist_list = list(enumerate(sim))\n\tid_dist_list.sort(key=lambda x:x[1])\n\tid_list   = [x[0] for x in id_dist_list][:limit]\n\tdist_list = [x[1] for x in id_dist_list][:limit]\n\ttext_list = [texts[x] for x in id_list] if texts else ['ERROR']*len(id_list)\n\treturn id_list, dist_list, text_list\ndef get_vectors(text_list):\n\t\"transform texts into embedding vectors\"\n\tbatch_size = 128\n\tvectors = []",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tdist_list",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tdist_list = [x[1] for x in id_dist_list][:limit]\n\ttext_list = [texts[x] for x in id_list] if texts else ['ERROR']*len(id_list)\n\treturn id_list, dist_list, text_list\ndef get_vectors(text_list):\n\t\"transform texts into embedding vectors\"\n\tbatch_size = 128\n\tvectors = []\n\tusage = Counter()\n\tfor i,texts in enumerate(batch(text_list, batch_size)):\n\t\tresp = ai.embeddings(texts)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\ttext_list",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\ttext_list = [texts[x] for x in id_list] if texts else ['ERROR']*len(id_list)\n\treturn id_list, dist_list, text_list\ndef get_vectors(text_list):\n\t\"transform texts into embedding vectors\"\n\tbatch_size = 128\n\tvectors = []\n\tusage = Counter()\n\tfor i,texts in enumerate(batch(text_list, batch_size)):\n\t\tresp = ai.embeddings(texts)\n\t\tv = resp['vectors']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tbatch_size",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tbatch_size = 128\n\tvectors = []\n\tusage = Counter()\n\tfor i,texts in enumerate(batch(text_list, batch_size)):\n\t\tresp = ai.embeddings(texts)\n\t\tv = resp['vectors']\n\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tvectors",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tvectors = []\n\tusage = Counter()\n\tfor i,texts in enumerate(batch(text_list, batch_size)):\n\t\tresp = ai.embeddings(texts)\n\t\tv = resp['vectors']\n\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)\n\treturn {'vectors':vectors, 'usage':dict(usage), 'model':resp['model']}",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tusage",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tusage = Counter()\n\tfor i,texts in enumerate(batch(text_list, batch_size)):\n\t\tresp = ai.embeddings(texts)\n\t\tv = resp['vectors']\n\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)\n\treturn {'vectors':vectors, 'usage':dict(usage), 'model':resp['model']}\ndef index_file(f, filename, fix_text=False, frag_size=0, cache=None):",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tresp",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tresp = ai.embeddings(texts)\n\t\tv = resp['vectors']\n\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)\n\treturn {'vectors':vectors, 'usage':dict(usage), 'model':resp['model']}\ndef index_file(f, filename, fix_text=False, frag_size=0, cache=None):\n\t\"return vector index (dictionary) for a given PDF file\"\n\t# calc md5",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tv",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tv = resp['vectors']\n\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)\n\treturn {'vectors':vectors, 'usage':dict(usage), 'model':resp['model']}\ndef index_file(f, filename, fix_text=False, frag_size=0, cache=None):\n\t\"return vector index (dictionary) for a given PDF file\"\n\t# calc md5\n\th = hashlib.md5()",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tu",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tu = resp['usage']\n\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)\n\treturn {'vectors':vectors, 'usage':dict(usage), 'model':resp['model']}\ndef index_file(f, filename, fix_text=False, frag_size=0, cache=None):\n\t\"return vector index (dictionary) for a given PDF file\"\n\t# calc md5\n\th = hashlib.md5()\n\th.update(f.read())",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tu['call_cnt']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tu['call_cnt'] = 1\n\t\tusage.update(u)\n\t\tvectors.extend(v)\n\treturn {'vectors':vectors, 'usage':dict(usage), 'model':resp['model']}\ndef index_file(f, filename, fix_text=False, frag_size=0, cache=None):\n\t\"return vector index (dictionary) for a given PDF file\"\n\t# calc md5\n\th = hashlib.md5()\n\th.update(f.read())\n\tmd5 = h.hexdigest()",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\th",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\th = hashlib.md5()\n\th.update(f.read())\n\tmd5 = h.hexdigest()\n\tfilesize = f.tell()\n\tf.seek(0)\n\t#\n\tt0 = now()\n\tpages = pdf.pdf_to_pages(f)\n\tt1 = now()\n\tif fix_text:",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tmd5",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tmd5 = h.hexdigest()\n\tfilesize = f.tell()\n\tf.seek(0)\n\t#\n\tt0 = now()\n\tpages = pdf.pdf_to_pages(f)\n\tt1 = now()\n\tif fix_text:\n\t\tfor i in range(len(pages)):\n\t\t\tpages[i] = fix_text_problems(pages[i])",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tfilesize",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tfilesize = f.tell()\n\tf.seek(0)\n\t#\n\tt0 = now()\n\tpages = pdf.pdf_to_pages(f)\n\tt1 = now()\n\tif fix_text:\n\t\tfor i in range(len(pages)):\n\t\t\tpages[i] = fix_text_problems(pages[i])\n\ttexts = split_pages_into_fragments(pages, frag_size)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tt0",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tt0 = now()\n\tpages = pdf.pdf_to_pages(f)\n\tt1 = now()\n\tif fix_text:\n\t\tfor i in range(len(pages)):\n\t\t\tpages[i] = fix_text_problems(pages[i])\n\ttexts = split_pages_into_fragments(pages, frag_size)\n\tt2 = now()\n\tif cache:\n\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tpages",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tpages = pdf.pdf_to_pages(f)\n\tt1 = now()\n\tif fix_text:\n\t\tfor i in range(len(pages)):\n\t\t\tpages[i] = fix_text_problems(pages[i])\n\ttexts = split_pages_into_fragments(pages, frag_size)\n\tt2 = now()\n\tif cache:\n\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'\n\t\tresp = cache.call(cache_key, get_vectors, texts)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tt1",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tt1 = now()\n\tif fix_text:\n\t\tfor i in range(len(pages)):\n\t\t\tpages[i] = fix_text_problems(pages[i])\n\ttexts = split_pages_into_fragments(pages, frag_size)\n\tt2 = now()\n\tif cache:\n\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'\n\t\tresp = cache.call(cache_key, get_vectors, texts)\n\telse:",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\t\tpages[i]",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\t\tpages[i] = fix_text_problems(pages[i])\n\ttexts = split_pages_into_fragments(pages, frag_size)\n\tt2 = now()\n\tif cache:\n\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'\n\t\tresp = cache.call(cache_key, get_vectors, texts)\n\telse:\n\t\tresp = get_vectors(texts)\n\tt3 = now()\n\tvectors = resp['vectors']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\ttexts",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\ttexts = split_pages_into_fragments(pages, frag_size)\n\tt2 = now()\n\tif cache:\n\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'\n\t\tresp = cache.call(cache_key, get_vectors, texts)\n\telse:\n\t\tresp = get_vectors(texts)\n\tt3 = now()\n\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tt2",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tt2 = now()\n\tif cache:\n\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'\n\t\tresp = cache.call(cache_key, get_vectors, texts)\n\telse:\n\t\tresp = get_vectors(texts)\n\tt3 = now()\n\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tcache_key",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tcache_key = f'get_vectors:{md5}:{frag_size}:{fix_text}'\n\t\tresp = cache.call(cache_key, get_vectors, texts)\n\telse:\n\t\tresp = get_vectors(texts)\n\tt3 = now()\n\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tresp",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tresp = cache.call(cache_key, get_vectors, texts)\n\telse:\n\t\tresp = get_vectors(texts)\n\tt3 = now()\n\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']\n\tout = {}",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tresp",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tresp = get_vectors(texts)\n\tt3 = now()\n\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tt3",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tt3 = now()\n\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tvectors",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tvectors = resp['vectors']\n\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tsummary_prompt",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tsummary_prompt = f\"{texts[0]}\\n\\nDescribe the document from which the fragment is extracted. Omit any details.\\n\\n\" # TODO: move to prompts.py\n\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts\n\tout['pages']     = pages",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tsummary",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tsummary = ai.complete(summary_prompt)\n\tt4 = now()\n\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts\n\tout['pages']     = pages\n\tout['vectors']   = vectors",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tt4",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tt4 = now()\n\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts\n\tout['pages']     = pages\n\tout['vectors']   = vectors\n\tout['summary']   = summary['text']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tusage",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tusage = resp['usage']\n\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts\n\tout['pages']     = pages\n\tout['vectors']   = vectors\n\tout['summary']   = summary['text']\n\tout['filename']  = filename",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout = {}\n\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts\n\tout['pages']     = pages\n\tout['vectors']   = vectors\n\tout['summary']   = summary['text']\n\tout['filename']  = filename\n\tout['filehash']  = f'md5:{md5}'",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['frag_size']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['frag_size'] = frag_size\n\tout['n_pages']   = len(pages)\n\tout['n_texts']   = len(texts)\n\tout['texts']     = texts\n\tout['pages']     = pages\n\tout['vectors']   = vectors\n\tout['summary']   = summary['text']\n\tout['filename']  = filename\n\tout['filehash']  = f'md5:{md5}'\n\tout['filesize']  = filesize",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tpage_offset",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tpage_offset = [0]\n\tfor p,page in enumerate(pages):\n\t\tpage_offset += [page_offset[-1]+len(page)+1]\n\t# TODO: del page_offset[-1] ???\n\tif frag_size:\n\t\ttext = ' '.join(pages)\n\t\treturn text_to_fragments(text, frag_size, page_offset)\n\telse:\n\t\treturn pages\ndef text_to_fragments(text, size, page_offset):",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\ttext = ' '.join(pages)\n\t\treturn text_to_fragments(text, frag_size, page_offset)\n\telse:\n\t\treturn pages\ndef text_to_fragments(text, size, page_offset):\n\t\"split single text into smaller fragments (list of texts)\"\n\tif size and len(text)>size:\n\t\tout = []\n\t\tpos = 0\n\t\tpage = 1",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tout",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tout = []\n\t\tpos = 0\n\t\tpage = 1\n\t\tp_off = page_offset.copy()[1:]\n\t\teos = find_eos(text)\n\t\tif len(text) not in eos:\n\t\t\teos += [len(text)]\n\t\tfor i in range(len(eos)):\n\t\t\tif eos[i]-pos>size:\n\t\t\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tpos",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tpos = 0\n\t\tpage = 1\n\t\tp_off = page_offset.copy()[1:]\n\t\teos = find_eos(text)\n\t\tif len(text) not in eos:\n\t\t\teos += [len(text)]\n\t\tfor i in range(len(eos)):\n\t\t\tif eos[i]-pos>size:\n\t\t\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\t\t\tout += [text_fragment]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tpage",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tpage = 1\n\t\tp_off = page_offset.copy()[1:]\n\t\teos = find_eos(text)\n\t\tif len(text) not in eos:\n\t\t\teos += [len(text)]\n\t\tfor i in range(len(eos)):\n\t\t\tif eos[i]-pos>size:\n\t\t\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\t\t\tout += [text_fragment]\n\t\t\t\tpos = eos[i]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tp_off",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tp_off = page_offset.copy()[1:]\n\t\teos = find_eos(text)\n\t\tif len(text) not in eos:\n\t\t\teos += [len(text)]\n\t\tfor i in range(len(eos)):\n\t\t\tif eos[i]-pos>size:\n\t\t\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\t\t\tout += [text_fragment]\n\t\t\t\tpos = eos[i]\n\t\t\t\tif eos[i]>p_off[0]:",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\teos",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\teos = find_eos(text)\n\t\tif len(text) not in eos:\n\t\t\teos += [len(text)]\n\t\tfor i in range(len(eos)):\n\t\t\tif eos[i]-pos>size:\n\t\t\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\t\t\tout += [text_fragment]\n\t\t\t\tpos = eos[i]\n\t\t\t\tif eos[i]>p_off[0]:\n\t\t\t\t\tpage += 1",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ttext_fragment",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\t\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\t\t\tout += [text_fragment]\n\t\t\t\tpos = eos[i]\n\t\t\t\tif eos[i]>p_off[0]:\n\t\t\t\t\tpage += 1\n\t\t\t\t\tdel p_off[0]\n\t\t# ugly: last iter\n\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\tout += [text_fragment]\n\t\t#",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpos",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\t\t\tpos = eos[i]\n\t\t\t\tif eos[i]>p_off[0]:\n\t\t\t\t\tpage += 1\n\t\t\t\t\tdel p_off[0]\n\t\t# ugly: last iter\n\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\tout += [text_fragment]\n\t\t#\n\t\tout = [x for x in out if x]\n\t\treturn out",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\ttext_fragment",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\ttext_fragment = f'PAGE({page}):\\n'+text[pos:eos[i]]\n\t\tout += [text_fragment]\n\t\t#\n\t\tout = [x for x in out if x]\n\t\treturn out\n\telse:\n\t\treturn [text]\ndef find_eos(text):\n\t\"return list of all end-of-sentence offsets\"\n\treturn [x.span()[1] for x in re.finditer('[.!?。]\\s+',text)]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tout",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tout = [x for x in out if x]\n\t\treturn out\n\telse:\n\t\treturn [text]\ndef find_eos(text):\n\t\"return list of all end-of-sentence offsets\"\n\treturn [x.span()[1] for x in re.finditer('[.!?。]\\s+',text)]\n###############################################################################\ndef fix_text_problems(text):\n\t\"fix common text problems\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\ttext",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\ttext = re.sub('\\s+[-]\\s+','',text) # word continuation in the next line\n\treturn text\ndef query(text, index, task=None, temperature=0.0, max_frags=1, hyde=False, hyde_prompt=None, limit=None, n_before=1, n_after=1, model=None):\n\t\"get dictionary with the answer for the given question (text).\"\n\tout = {}\n\tif hyde:\n\t\t# TODO: model param\n\t\tout['hyde'] = hypotetical_answer(text, index, hyde_prompt=hyde_prompt, temperature=temperature)\n\t\t# TODO: usage\n\t# RANK FRAGMENTS",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout = {}\n\tif hyde:\n\t\t# TODO: model param\n\t\tout['hyde'] = hypotetical_answer(text, index, hyde_prompt=hyde_prompt, temperature=temperature)\n\t\t# TODO: usage\n\t# RANK FRAGMENTS\n\tif hyde:\n\t\tresp = ai.embedding(out['hyde']['text'])\n\t\t# TODO: usage\n\telse:",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tout['hyde']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tout['hyde'] = hypotetical_answer(text, index, hyde_prompt=hyde_prompt, temperature=temperature)\n\t\t# TODO: usage\n\t# RANK FRAGMENTS\n\tif hyde:\n\t\tresp = ai.embedding(out['hyde']['text'])\n\t\t# TODO: usage\n\telse:\n\t\tresp = ai.embedding(text)\n\t\t# TODO: usage\n\tv = resp['vector']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tresp",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tresp = ai.embedding(out['hyde']['text'])\n\t\t# TODO: usage\n\telse:\n\t\tresp = ai.embedding(text)\n\t\t# TODO: usage\n\tv = resp['vector']\n\tt0 = now()\n\tid_list, dist_list, text_list = query_by_vector(v, index, limit=limit)\n\tdt0 = now()-t0\n\t# BUILD PROMPT",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tresp",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tresp = ai.embedding(text)\n\t\t# TODO: usage\n\tv = resp['vector']\n\tt0 = now()\n\tid_list, dist_list, text_list = query_by_vector(v, index, limit=limit)\n\tdt0 = now()-t0\n\t# BUILD PROMPT\n\t# select fragments\n\tN_BEFORE = 1 # TODO: param\n\tN_AFTER =  1 # TODO: param",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tv",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tv = resp['vector']\n\tt0 = now()\n\tid_list, dist_list, text_list = query_by_vector(v, index, limit=limit)\n\tdt0 = now()-t0\n\t# BUILD PROMPT\n\t# select fragments\n\tN_BEFORE = 1 # TODO: param\n\tN_AFTER =  1 # TODO: param\n\tselected = {} # text id -> rank\n\tfor rank,id in enumerate(id_list):",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tt0",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tt0 = now()\n\tid_list, dist_list, text_list = query_by_vector(v, index, limit=limit)\n\tdt0 = now()-t0\n\t# BUILD PROMPT\n\t# select fragments\n\tN_BEFORE = 1 # TODO: param\n\tN_AFTER =  1 # TODO: param\n\tselected = {} # text id -> rank\n\tfor rank,id in enumerate(id_list):\n\t\tfor x in range(id-n_before, id+1+n_after):",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tdt0",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tdt0 = now()-t0\n\t# BUILD PROMPT\n\t# select fragments\n\tN_BEFORE = 1 # TODO: param\n\tN_AFTER =  1 # TODO: param\n\tselected = {} # text id -> rank\n\tfor rank,id in enumerate(id_list):\n\t\tfor x in range(id-n_before, id+1+n_after):\n\t\t\tif x not in selected and x>=0 and x<index['size']:\n\t\t\t\tselected[x] = rank",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tN_BEFORE",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tN_BEFORE = 1 # TODO: param\n\tN_AFTER =  1 # TODO: param\n\tselected = {} # text id -> rank\n\tfor rank,id in enumerate(id_list):\n\t\tfor x in range(id-n_before, id+1+n_after):\n\t\t\tif x not in selected and x>=0 and x<index['size']:\n\t\t\t\tselected[x] = rank\n\tselected2 = [(id,rank) for id,rank in selected.items()]\n\tselected2.sort(key=lambda x:(x[1],x[0]))\n\t# build context",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tN_AFTER",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tN_AFTER =  1 # TODO: param\n\tselected = {} # text id -> rank\n\tfor rank,id in enumerate(id_list):\n\t\tfor x in range(id-n_before, id+1+n_after):\n\t\t\tif x not in selected and x>=0 and x<index['size']:\n\t\t\t\tselected[x] = rank\n\tselected2 = [(id,rank) for id,rank in selected.items()]\n\tselected2.sort(key=lambda x:(x[1],x[0]))\n\t# build context\n\tSEPARATOR = '\\n---\\n'",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tselected",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tselected = {} # text id -> rank\n\tfor rank,id in enumerate(id_list):\n\t\tfor x in range(id-n_before, id+1+n_after):\n\t\t\tif x not in selected and x>=0 and x<index['size']:\n\t\t\t\tselected[x] = rank\n\tselected2 = [(id,rank) for id,rank in selected.items()]\n\tselected2.sort(key=lambda x:(x[1],x[0]))\n\t# build context\n\tSEPARATOR = '\\n---\\n'\n\tcontext = ''",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tselected[x]",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\t\t\tselected[x] = rank\n\tselected2 = [(id,rank) for id,rank in selected.items()]\n\tselected2.sort(key=lambda x:(x[1],x[0]))\n\t# build context\n\tSEPARATOR = '\\n---\\n'\n\tcontext = ''\n\tcontext_len = 0\n\tfrag_list = []\n\tfor id,rank in selected2:\n\t\tfrag = index['texts'][id]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tselected2",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tselected2 = [(id,rank) for id,rank in selected.items()]\n\tselected2.sort(key=lambda x:(x[1],x[0]))\n\t# build context\n\tSEPARATOR = '\\n---\\n'\n\tcontext = ''\n\tcontext_len = 0\n\tfrag_list = []\n\tfor id,rank in selected2:\n\t\tfrag = index['texts'][id]\n\t\tfrag_len = ai.get_token_count(frag)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tSEPARATOR",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tSEPARATOR = '\\n---\\n'\n\tcontext = ''\n\tcontext_len = 0\n\tfrag_list = []\n\tfor id,rank in selected2:\n\t\tfrag = index['texts'][id]\n\t\tfrag_len = ai.get_token_count(frag)\n\t\tif context_len+frag_len <= 3000: # TODO: remove hardcode\n\t\t\tcontext += SEPARATOR + frag # add separator and text fragment\n\t\t\tfrag_list += [frag]",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tcontext",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tcontext = ''\n\tcontext_len = 0\n\tfrag_list = []\n\tfor id,rank in selected2:\n\t\tfrag = index['texts'][id]\n\t\tfrag_len = ai.get_token_count(frag)\n\t\tif context_len+frag_len <= 3000: # TODO: remove hardcode\n\t\t\tcontext += SEPARATOR + frag # add separator and text fragment\n\t\t\tfrag_list += [frag]\n\t\t\tcontext_len = ai.get_token_count(context)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tcontext_len",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tcontext_len = 0\n\tfrag_list = []\n\tfor id,rank in selected2:\n\t\tfrag = index['texts'][id]\n\t\tfrag_len = ai.get_token_count(frag)\n\t\tif context_len+frag_len <= 3000: # TODO: remove hardcode\n\t\t\tcontext += SEPARATOR + frag # add separator and text fragment\n\t\t\tfrag_list += [frag]\n\t\t\tcontext_len = ai.get_token_count(context)\n\tout['context_len'] = context_len",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tfrag_list",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tfrag_list = []\n\tfor id,rank in selected2:\n\t\tfrag = index['texts'][id]\n\t\tfrag_len = ai.get_token_count(frag)\n\t\tif context_len+frag_len <= 3000: # TODO: remove hardcode\n\t\t\tcontext += SEPARATOR + frag # add separator and text fragment\n\t\t\tfrag_list += [frag]\n\t\t\tcontext_len = ai.get_token_count(context)\n\tout['context_len'] = context_len\n\tprompt = f\"\"\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tfrag",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tfrag = index['texts'][id]\n\t\tfrag_len = ai.get_token_count(frag)\n\t\tif context_len+frag_len <= 3000: # TODO: remove hardcode\n\t\t\tcontext += SEPARATOR + frag # add separator and text fragment\n\t\t\tfrag_list += [frag]\n\t\t\tcontext_len = ai.get_token_count(context)\n\tout['context_len'] = context_len\n\tprompt = f\"\"\"\n\t\t{task or 'Task: Answer question based on context.'}\n\t\tContext:",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\tfrag_len",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\tfrag_len = ai.get_token_count(frag)\n\t\tif context_len+frag_len <= 3000: # TODO: remove hardcode\n\t\t\tcontext += SEPARATOR + frag # add separator and text fragment\n\t\t\tfrag_list += [frag]\n\t\t\tcontext_len = ai.get_token_count(context)\n\tout['context_len'] = context_len\n\tprompt = f\"\"\"\n\t\t{task or 'Task: Answer question based on context.'}\n\t\tContext:\n\t\t{context}",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t\t\tcontext_len",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t\t\tcontext_len = ai.get_token_count(context)\n\tout['context_len'] = context_len\n\tprompt = f\"\"\"\n\t\t{task or 'Task: Answer question based on context.'}\n\t\tContext:\n\t\t{context}\n\t\tQuestion: {text}\n\t\tAnswer:\"\"\" # TODO: move to prompts.py\n\t# GET ANSWER\n\tresp2 = ai.complete(prompt, temperature=temperature, model=model)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['context_len']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['context_len'] = context_len\n\tprompt = f\"\"\"\n\t\t{task or 'Task: Answer question based on context.'}\n\t\tContext:\n\t\t{context}\n\t\tQuestion: {text}\n\t\tAnswer:\"\"\" # TODO: move to prompts.py\n\t# GET ANSWER\n\tresp2 = ai.complete(prompt, temperature=temperature, model=model)\n\tanswer = resp2['text']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tprompt",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tprompt = f\"\"\"\n\t\t{task or 'Task: Answer question based on context.'}\n\t\tContext:\n\t\t{context}\n\t\tQuestion: {text}\n\t\tAnswer:\"\"\" # TODO: move to prompts.py\n\t# GET ANSWER\n\tresp2 = ai.complete(prompt, temperature=temperature, model=model)\n\tanswer = resp2['text']\n\tusage = resp2['usage']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tresp2",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tresp2 = ai.complete(prompt, temperature=temperature, model=model)\n\tanswer = resp2['text']\n\tusage = resp2['usage']\n\t# OUTPUT\n\tout['vector_query_time'] = dt0\n\tout['id_list'] = id_list\n\tout['dist_list'] = dist_list\n\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tanswer",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tanswer = resp2['text']\n\tusage = resp2['usage']\n\t# OUTPUT\n\tout['vector_query_time'] = dt0\n\tout['id_list'] = id_list\n\tout['dist_list'] = dist_list\n\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tusage",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tusage = resp2['usage']\n\t# OUTPUT\n\tout['vector_query_time'] = dt0\n\tout['id_list'] = id_list\n\tout['dist_list'] = dist_list\n\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['vector_query_time']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['vector_query_time'] = dt0\n\tout['id_list'] = id_list\n\tout['dist_list'] = dist_list\n\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['id_list']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['id_list'] = id_list\n\tout['dist_list'] = dist_list\n\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['dist_list']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['dist_list'] = dist_list\n\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['selected']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['selected'] = selected\n\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['selected2']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['selected2'] = selected2\n\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['frag_list']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['frag_list'] = frag_list\n\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\t#out['query.vector']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\t#out['query.vector'] = resp['vector']\n\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"\n\thyde_prompt = hyde_prompt or 'Write document that answers the question.'",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['usage']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['usage'] = usage\n\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"\n\thyde_prompt = hyde_prompt or 'Write document that answers the question.'\n\tprompt = f\"\"\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['prompt']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['prompt'] = prompt\n\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"\n\thyde_prompt = hyde_prompt or 'Write document that answers the question.'\n\tprompt = f\"\"\"\n\t{hyde_prompt}",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['model']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['model'] = resp2['model']\n\t# CORE\n\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"\n\thyde_prompt = hyde_prompt or 'Write document that answers the question.'\n\tprompt = f\"\"\"\n\t{hyde_prompt}\n\tQuestion: \"{text}\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tout['text']",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tout['text'] = answer\n\treturn out\ndef hypotetical_answer(text, index, hyde_prompt=None, temperature=0.0):\n\t\"get hypotethical answer for the question (text)\"\n\thyde_prompt = hyde_prompt or 'Write document that answers the question.'\n\tprompt = f\"\"\"\n\t{hyde_prompt}\n\tQuestion: \"{text}\"\n\tDocument:\"\"\" # TODO: move to prompts.py\n\tresp = ai.complete(prompt, temperature=temperature)",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\thyde_prompt",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\thyde_prompt = hyde_prompt or 'Write document that answers the question.'\n\tprompt = f\"\"\"\n\t{hyde_prompt}\n\tQuestion: \"{text}\"\n\tDocument:\"\"\" # TODO: move to prompts.py\n\tresp = ai.complete(prompt, temperature=temperature)\n\treturn resp\ndef community_tokens_available_pct():\n\tused = ai.get_community_usage_cost()\n\tlimit = float(os.getenv('COMMUNITY_DAILY_USD',0))",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tprompt",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tprompt = f\"\"\"\n\t{hyde_prompt}\n\tQuestion: \"{text}\"\n\tDocument:\"\"\" # TODO: move to prompts.py\n\tresp = ai.complete(prompt, temperature=temperature)\n\treturn resp\ndef community_tokens_available_pct():\n\tused = ai.get_community_usage_cost()\n\tlimit = float(os.getenv('COMMUNITY_DAILY_USD',0))\n\tpct = (100.0 * (limit-used) / limit) if limit else 0",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tresp",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tresp = ai.complete(prompt, temperature=temperature)\n\treturn resp\ndef community_tokens_available_pct():\n\tused = ai.get_community_usage_cost()\n\tlimit = float(os.getenv('COMMUNITY_DAILY_USD',0))\n\tpct = (100.0 * (limit-used) / limit) if limit else 0\n\tpct = max(0, pct)\n\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tused",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tused = ai.get_community_usage_cost()\n\tlimit = float(os.getenv('COMMUNITY_DAILY_USD',0))\n\tpct = (100.0 * (limit-used) / limit) if limit else 0\n\tpct = max(0, pct)\n\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tlimit",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tlimit = float(os.getenv('COMMUNITY_DAILY_USD',0))\n\tpct = (100.0 * (limit-used) / limit) if limit else 0\n\tpct = max(0, pct)\n\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tpct",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tpct = (100.0 * (limit-used) / limit) if limit else 0\n\tpct = max(0, pct)\n\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tpct",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tpct = max(0, pct)\n\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tpct",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tpct = min(100, pct)\n\treturn pct\ndef community_tokens_refresh_in():\n\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util\ndef batch(data, n):",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tx = datetime.datetime.now()\n\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util\ndef batch(data, n):\n\tfor i in range(0, len(data), n):\n\t\tyield data[i:i+n]\nif __name__==\"__main__\":",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tdt",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tdt = (x.replace(hour=23, minute=59, second=59) - x).seconds\n\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util\ndef batch(data, n):\n\tfor i in range(0, len(data), n):\n\t\tyield data[i:i+n]\nif __name__==\"__main__\":\n\tprint(text_to_fragments(\"to jest. test tego. programu\", size=3, page_offset=[0,5,10,15,20]))",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\th",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\th = dt // 3600\n\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util\ndef batch(data, n):\n\tfor i in range(0, len(data), n):\n\t\tyield data[i:i+n]\nif __name__==\"__main__\":\n\tprint(text_to_fragments(\"to jest. test tego. programu\", size=3, page_offset=[0,5,10,15,20]))",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "\tm",
        "kind": 5,
        "importPath": "src.model",
        "description": "src.model",
        "peekOfCode": "\tm = dt  % 3600 // 60\n\treturn f\"{h} h {m} min\"\n# util\ndef batch(data, n):\n\tfor i in range(0, len(data), n):\n\t\tyield data[i:i+n]\nif __name__==\"__main__\":\n\tprint(text_to_fragments(\"to jest. test tego. programu\", size=3, page_offset=[0,5,10,15,20]))",
        "detail": "src.model",
        "documentation": {}
    },
    {
        "label": "pdf_to_pages",
        "kind": 2,
        "importPath": "src.pdf",
        "description": "src.pdf",
        "peekOfCode": "def pdf_to_pages(file):\n\t\"extract text (pages) from pdf file\"\n\tpages = []\n\tpdf = pypdf.PdfReader(file)\n\tfor p in range(len(pdf.pages)):\n\t\tpage = pdf.pages[p]\n\t\ttext = page.extract_text()\n\t\tpages += [text]\n\treturn pages",
        "detail": "src.pdf",
        "documentation": {}
    },
    {
        "label": "\tpages",
        "kind": 5,
        "importPath": "src.pdf",
        "description": "src.pdf",
        "peekOfCode": "\tpages = []\n\tpdf = pypdf.PdfReader(file)\n\tfor p in range(len(pdf.pages)):\n\t\tpage = pdf.pages[p]\n\t\ttext = page.extract_text()\n\t\tpages += [text]\n\treturn pages",
        "detail": "src.pdf",
        "documentation": {}
    },
    {
        "label": "\tpdf",
        "kind": 5,
        "importPath": "src.pdf",
        "description": "src.pdf",
        "peekOfCode": "\tpdf = pypdf.PdfReader(file)\n\tfor p in range(len(pdf.pages)):\n\t\tpage = pdf.pages[p]\n\t\ttext = page.extract_text()\n\t\tpages += [text]\n\treturn pages",
        "detail": "src.pdf",
        "documentation": {}
    },
    {
        "label": "\t\tpage",
        "kind": 5,
        "importPath": "src.pdf",
        "description": "src.pdf",
        "peekOfCode": "\t\tpage = pdf.pages[p]\n\t\ttext = page.extract_text()\n\t\tpages += [text]\n\treturn pages",
        "detail": "src.pdf",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "src.pdf",
        "description": "src.pdf",
        "peekOfCode": "\t\ttext = page.extract_text()\n\t\tpages += [text]\n\treturn pages",
        "detail": "src.pdf",
        "documentation": {}
    },
    {
        "label": "TASK",
        "kind": 5,
        "importPath": "src.prompts",
        "description": "src.prompts",
        "peekOfCode": "TASK = {\n\t'v6': (\n\t\t\t\"Answer the question truthfully based on the text below. \"\n\t\t\t\"Include verbatim quote and a comment where to find it in the text (page number). \"\n\t\t\t#\"After the quote write a step by step explanation in a new paragraph. \"\n\t\t\t\"After the quote write a step by step explanation. \"\n\t\t\t\"Use bullet points. \"\n\t\t\t#\"After that try to rephrase the original question so it might give better results. \" \n\t\t),\n\t'v5': (",
        "detail": "src.prompts",
        "documentation": {}
    },
    {
        "label": "HYDE",
        "kind": 5,
        "importPath": "src.prompts",
        "description": "src.prompts",
        "peekOfCode": "HYDE = \"Write an example answer to the following question. Don't write generic answer, just assume everything that is not known.\"\n# TODO\nSUMMARY = {\n\t'v2':'Describe the document from which the fragment is extracted. Omit any details.',\n\t'v1':'Describe the document from which the fragment is extracted. Do not describe the fragment, focus on figuring out what kind document it is.',\n}",
        "detail": "src.prompts",
        "documentation": {}
    },
    {
        "label": "SUMMARY",
        "kind": 5,
        "importPath": "src.prompts",
        "description": "src.prompts",
        "peekOfCode": "SUMMARY = {\n\t'v2':'Describe the document from which the fragment is extracted. Omit any details.',\n\t'v1':'Describe the document from which the fragment is extracted. Do not describe the fragment, focus on figuring out what kind document it is.',\n}",
        "detail": "src.prompts",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "class Stats:\n\tdef __init__(self):\n\t\tself.config = {}\n\tdef render(self, key):\n\t\tvariables = dict(\n\t\t\tdate = strftime('%Y-%m-%d'),\n\t\t\thour = strftime('%H'),\n\t\t)\n\t\tvariables.update(self.config)\n\t\tfor k,v in variables.items():",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "DictStats",
        "kind": 6,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "class DictStats(Stats):\n\tdef __init__(self, data_dict):\n\t\tself.data = data_dict\n\t\tself.config = {}\n\tdef incr(self, key, kv_dict):\n\t\tdata = self.data\n\t\tkey = self.render(key)\n\t\tif key not in data:\n\t\t\tdata[key] = {}\n\t\tfor member,val in kv_dict.items():",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "RedisStats",
        "kind": 6,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "class RedisStats(Stats):\n\tdef __init__(self):\n\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')\n\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.config = {}\n\t@retry(tries=5, delay=0.1)\n\tdef incr(self, key, kv_dict):\n\t\t# TODO: non critical code -> safe exceptions",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "def get_stats(**kw):\n\tMODE = os.getenv('STATS_MODE','').upper()\n\tif MODE=='REDIS':\n\t\tstats = RedisStats()\n\telse:\n\t\tstats = DictStats(stats_data_dict)\n\tstats.config.update(kw)\n\treturn stats\nif __name__==\"__main__\":\n\ts1 = get_stats(user='maciek')",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tself.config",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tself.config = {}\n\tdef render(self, key):\n\t\tvariables = dict(\n\t\t\tdate = strftime('%Y-%m-%d'),\n\t\t\thour = strftime('%H'),\n\t\t)\n\t\tvariables.update(self.config)\n\t\tfor k,v in variables.items():\n\t\t\tkey = key.replace('['+k+']',v)\n\t\treturn key",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tvariables",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tvariables = dict(\n\t\t\tdate = strftime('%Y-%m-%d'),\n\t\t\thour = strftime('%H'),\n\t\t)\n\t\tvariables.update(self.config)\n\t\tfor k,v in variables.items():\n\t\t\tkey = key.replace('['+k+']',v)\n\t\treturn key\nclass DictStats(Stats):\n\tdef __init__(self, data_dict):",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\tdate",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\tdate = strftime('%Y-%m-%d'),\n\t\t\thour = strftime('%H'),\n\t\t)\n\t\tvariables.update(self.config)\n\t\tfor k,v in variables.items():\n\t\t\tkey = key.replace('['+k+']',v)\n\t\treturn key\nclass DictStats(Stats):\n\tdef __init__(self, data_dict):\n\t\tself.data = data_dict",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\thour",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\thour = strftime('%H'),\n\t\t)\n\t\tvariables.update(self.config)\n\t\tfor k,v in variables.items():\n\t\t\tkey = key.replace('['+k+']',v)\n\t\treturn key\nclass DictStats(Stats):\n\tdef __init__(self, data_dict):\n\t\tself.data = data_dict\n\t\tself.config = {}",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\tkey",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\tkey = key.replace('['+k+']',v)\n\t\treturn key\nclass DictStats(Stats):\n\tdef __init__(self, data_dict):\n\t\tself.data = data_dict\n\t\tself.config = {}\n\tdef incr(self, key, kv_dict):\n\t\tdata = self.data\n\t\tkey = self.render(key)\n\t\tif key not in data:",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tself.data",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tself.data = data_dict\n\t\tself.config = {}\n\tdef incr(self, key, kv_dict):\n\t\tdata = self.data\n\t\tkey = self.render(key)\n\t\tif key not in data:\n\t\t\tdata[key] = {}\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tdata[key][member] = data[key].get(member,0) + val",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tself.config",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tself.config = {}\n\tdef incr(self, key, kv_dict):\n\t\tdata = self.data\n\t\tkey = self.render(key)\n\t\tif key not in data:\n\t\t\tdata[key] = {}\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tdata[key][member] = data[key].get(member,0) + val\n\tdef get(self, key):",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tdata = self.data\n\t\tkey = self.render(key)\n\t\tif key not in data:\n\t\t\tdata[key] = {}\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tdata[key][member] = data[key].get(member,0) + val\n\tdef get(self, key):\n\t\tkey = self.render(key)\n\t\treturn self.data.get(key, {})",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tkey = self.render(key)\n\t\tif key not in data:\n\t\t\tdata[key] = {}\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tdata[key][member] = data[key].get(member,0) + val\n\tdef get(self, key):\n\t\tkey = self.render(key)\n\t\treturn self.data.get(key, {})\nclass RedisStats(Stats):",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata[key]",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\tdata[key] = {}\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tdata[key][member] = data[key].get(member,0) + val\n\tdef get(self, key):\n\t\tkey = self.render(key)\n\t\treturn self.data.get(key, {})\nclass RedisStats(Stats):\n\tdef __init__(self):\n\t\tREDIS_URL = os.getenv('REDIS_URL')",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\tmember",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\tmember = self.render(member)\n\t\t\tdata[key][member] = data[key].get(member,0) + val\n\tdef get(self, key):\n\t\tkey = self.render(key)\n\t\treturn self.data.get(key, {})\nclass RedisStats(Stats):\n\tdef __init__(self):\n\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata[key][member]",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\tdata[key][member] = data[key].get(member,0) + val\n\tdef get(self, key):\n\t\tkey = self.render(key)\n\t\treturn self.data.get(key, {})\nclass RedisStats(Stats):\n\tdef __init__(self):\n\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')\n\t\tself.db = redis.Redis.from_url(REDIS_URL)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tkey = self.render(key)\n\t\treturn self.data.get(key, {})\nclass RedisStats(Stats):\n\tdef __init__(self):\n\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')\n\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.config = {}\n\t@retry(tries=5, delay=0.1)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tREDIS_URL",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tREDIS_URL = os.getenv('REDIS_URL')\n\t\tif not REDIS_URL:\n\t\t\traise Exception('No Redis configuration in environment variables!')\n\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.config = {}\n\t@retry(tries=5, delay=0.1)\n\tdef incr(self, key, kv_dict):\n\t\t# TODO: non critical code -> safe exceptions\n\t\tkey = self.render(key)\n\t\tp = self.db.pipeline()",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tself.db",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tself.db = redis.Redis.from_url(REDIS_URL)\n\t\tself.config = {}\n\t@retry(tries=5, delay=0.1)\n\tdef incr(self, key, kv_dict):\n\t\t# TODO: non critical code -> safe exceptions\n\t\tkey = self.render(key)\n\t\tp = self.db.pipeline()\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tself.db.zincrby(key, val, member)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tself.config",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tself.config = {}\n\t@retry(tries=5, delay=0.1)\n\tdef incr(self, key, kv_dict):\n\t\t# TODO: non critical code -> safe exceptions\n\t\tkey = self.render(key)\n\t\tp = self.db.pipeline()\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tself.db.zincrby(key, val, member)\n\t\tp.execute()",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tkey = self.render(key)\n\t\tp = self.db.pipeline()\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tself.db.zincrby(key, val, member)\n\t\tp.execute()\n\t@retry(tries=5, delay=0.1)\n\tdef get(self, key):\n\t\t# TODO: non critical code -> safe exceptions\n\t\tkey = self.render(key)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tp",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tp = self.db.pipeline()\n\t\tfor member,val in kv_dict.items():\n\t\t\tmember = self.render(member)\n\t\t\tself.db.zincrby(key, val, member)\n\t\tp.execute()\n\t@retry(tries=5, delay=0.1)\n\tdef get(self, key):\n\t\t# TODO: non critical code -> safe exceptions\n\t\tkey = self.render(key)\n\t\titems = self.db.zscan_iter(key)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\t\tmember",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\t\tmember = self.render(member)\n\t\t\tself.db.zincrby(key, val, member)\n\t\tp.execute()\n\t@retry(tries=5, delay=0.1)\n\tdef get(self, key):\n\t\t# TODO: non critical code -> safe exceptions\n\t\tkey = self.render(key)\n\t\titems = self.db.zscan_iter(key)\n\t\treturn {k.decode('utf8'):v for k,v in items}\nstats_data_dict = {}",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tkey = self.render(key)\n\t\titems = self.db.zscan_iter(key)\n\t\treturn {k.decode('utf8'):v for k,v in items}\nstats_data_dict = {}\ndef get_stats(**kw):\n\tMODE = os.getenv('STATS_MODE','').upper()\n\tif MODE=='REDIS':\n\t\tstats = RedisStats()\n\telse:\n\t\tstats = DictStats(stats_data_dict)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\titems",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\titems = self.db.zscan_iter(key)\n\t\treturn {k.decode('utf8'):v for k,v in items}\nstats_data_dict = {}\ndef get_stats(**kw):\n\tMODE = os.getenv('STATS_MODE','').upper()\n\tif MODE=='REDIS':\n\t\tstats = RedisStats()\n\telse:\n\t\tstats = DictStats(stats_data_dict)\n\tstats.config.update(kw)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "stats_data_dict",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "stats_data_dict = {}\ndef get_stats(**kw):\n\tMODE = os.getenv('STATS_MODE','').upper()\n\tif MODE=='REDIS':\n\t\tstats = RedisStats()\n\telse:\n\t\tstats = DictStats(stats_data_dict)\n\tstats.config.update(kw)\n\treturn stats\nif __name__==\"__main__\":",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\tMODE",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\tMODE = os.getenv('STATS_MODE','').upper()\n\tif MODE=='REDIS':\n\t\tstats = RedisStats()\n\telse:\n\t\tstats = DictStats(stats_data_dict)\n\tstats.config.update(kw)\n\treturn stats\nif __name__==\"__main__\":\n\ts1 = get_stats(user='maciek')\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tstats",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tstats = RedisStats()\n\telse:\n\t\tstats = DictStats(stats_data_dict)\n\tstats.config.update(kw)\n\treturn stats\nif __name__==\"__main__\":\n\ts1 = get_stats(user='maciek')\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\tprint(s1.data)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\t\tstats",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\t\tstats = DictStats(stats_data_dict)\n\tstats.config.update(kw)\n\treturn stats\nif __name__==\"__main__\":\n\ts1 = get_stats(user='maciek')\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\tprint(s1.data)\n\tprint(s1.get('aaa:[date]:[user]'))\n\t#",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\ts1",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\ts1 = get_stats(user='maciek')\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\ts1.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\tprint(s1.data)\n\tprint(s1.get('aaa:[date]:[user]'))\n\t#\n\ts2 = get_stats(user='kerbal')\n\ts2.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\ts2.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\tprint(s2.data)",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "\ts2",
        "kind": 5,
        "importPath": "src.stats",
        "description": "src.stats",
        "peekOfCode": "\ts2 = get_stats(user='kerbal')\n\ts2.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\ts2.incr('aaa:[date]:[user]', dict(a=1,b=2))\n\tprint(s2.data)\n\tprint(s2.get('aaa:[date]:[user]'))",
        "detail": "src.stats",
        "documentation": {}
    },
    {
        "label": "Storage",
        "kind": 6,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "class Storage:\n\t\"Encrypted object storage (base class)\"\n\tdef __init__(self, secret_key):\n\t\tk = secret_key.encode()\n\t\tself.folder = hashlib.blake2s(k, salt=SALT, person=b'folder', digest_size=8).hexdigest()\n\t\tself.passwd = hashlib.blake2s(k, salt=SALT, person=b'passwd', digest_size=32).hexdigest()\n\t\tself.AES_MODE = AES.MODE_ECB # TODO: better AES mode ???\n\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):\n\t\t\"get one object from the folder\"",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "DictStorage",
        "kind": 6,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "class DictStorage(Storage):\n\t\"Dictionary based storage\"\n\tdef __init__(self, secret_key, data_dict):\n\t\tsuper().__init__(secret_key)\n\t\tself.data = data_dict\n\tdef _put(self, name, data):\n\t\tif self.folder not in self.data:\n\t\t\tself.data[self.folder] = {}\n\t\tself.data[self.folder][name] = data\n\tdef _get(self, name):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "LocalStorage",
        "kind": 6,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "class LocalStorage(Storage):\n\t\"Local filesystem based storage\"\n\tdef __init__(self, secret_key, path):\n\t\tif not path:\n\t\t\traise Exception('No storage path in environment variables!')\n\t\tsuper().__init__(secret_key)\n\t\tself.path = os.path.join(path, self.folder)\n\t\tif not os.path.exists(self.path):\n\t\t\tos.makedirs(self.path)\n\tdef _put(self, name, data):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "S3Storage",
        "kind": 6,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "class S3Storage(Storage):\n\t\"S3 based encrypted storage\"\n\tdef __init__(self, secret_key, **kw):\n\t\tprefix = kw.get('prefix') or os.getenv('S3_PREFIX','index/x1')\n\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\tbucket = kw.get('bucket') or os.getenv('S3_BUCKET','ask-my-pdf')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "get_storage",
        "kind": 2,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "def get_storage(api_key, data_dict):\n\t\"get storage adapter configured in environment variables\"\n\tmode = os.getenv('STORAGE_MODE','').upper()\n\tpath = os.getenv('STORAGE_PATH','')\n\tif mode=='S3':\n\t\tstorage = S3Storage(api_key)\n\telif mode=='LOCAL':\n\t\tstorage = LocalStorage(api_key, path)\n\telse:\n\t\tstorage = DictStorage(api_key, data_dict)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "SALT",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "SALT = unhexlify(os.getenv('STORAGE_SALT','00'))\nclass Storage:\n\t\"Encrypted object storage (base class)\"\n\tdef __init__(self, secret_key):\n\t\tk = secret_key.encode()\n\t\tself.folder = hashlib.blake2s(k, salt=SALT, person=b'folder', digest_size=8).hexdigest()\n\t\tself.passwd = hashlib.blake2s(k, salt=SALT, person=b'passwd', digest_size=32).hexdigest()\n\t\tself.AES_MODE = AES.MODE_ECB # TODO: better AES mode ???\n\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tk",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tk = secret_key.encode()\n\t\tself.folder = hashlib.blake2s(k, salt=SALT, person=b'folder', digest_size=8).hexdigest()\n\t\tself.passwd = hashlib.blake2s(k, salt=SALT, person=b'passwd', digest_size=32).hexdigest()\n\t\tself.AES_MODE = AES.MODE_ECB # TODO: better AES mode ???\n\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):\n\t\t\"get one object from the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.folder",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.folder = hashlib.blake2s(k, salt=SALT, person=b'folder', digest_size=8).hexdigest()\n\t\tself.passwd = hashlib.blake2s(k, salt=SALT, person=b'passwd', digest_size=32).hexdigest()\n\t\tself.AES_MODE = AES.MODE_ECB # TODO: better AES mode ???\n\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):\n\t\t\"get one object from the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)\n\t\treturn obj",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.passwd",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.passwd = hashlib.blake2s(k, salt=SALT, person=b'passwd', digest_size=32).hexdigest()\n\t\tself.AES_MODE = AES.MODE_ECB # TODO: better AES mode ???\n\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):\n\t\t\"get one object from the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef put(self, name, obj):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.AES_MODE",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.AES_MODE = AES.MODE_ECB # TODO: better AES mode ???\n\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):\n\t\t\"get one object from the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef put(self, name, obj):\n\t\t\"put the object into the folder\"",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.AES_BLOCK_SIZE",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.AES_BLOCK_SIZE = 16\n\tdef get(self, name, default=None):\n\t\t\"get one object from the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef put(self, name, obj):\n\t\t\"put the object into the folder\"\n\t\tsafe_name = self.encode(name)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tsafe_name",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tsafe_name = self.encode(name)\n\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef put(self, name, obj):\n\t\t\"put the object into the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self.serialize(obj)\n\t\tself._put(safe_name, data)\n\t\treturn data",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tdata = self._get(safe_name)\n\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef put(self, name, obj):\n\t\t\"put the object into the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self.serialize(obj)\n\t\tself._put(safe_name, data)\n\t\treturn data\n\tdef list(self):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tobj = self.deserialize(data)\n\t\treturn obj\n\tdef put(self, name, obj):\n\t\t\"put the object into the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tdata = self.serialize(obj)\n\t\tself._put(safe_name, data)\n\t\treturn data\n\tdef list(self):\n\t\t\"list object names from the folder\"",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tsafe_name",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tsafe_name = self.encode(name)\n\t\tdata = self.serialize(obj)\n\t\tself._put(safe_name, data)\n\t\treturn data\n\tdef list(self):\n\t\t\"list object names from the folder\"\n\t\treturn [self.decode(name) for name in self._list()]\n\tdef delete(self, name):\n\t\t\"delete the object from the folder\"\n\t\tsafe_name = self.encode(name)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tdata = self.serialize(obj)\n\t\tself._put(safe_name, data)\n\t\treturn data\n\tdef list(self):\n\t\t\"list object names from the folder\"\n\t\treturn [self.decode(name) for name in self._list()]\n\tdef delete(self, name):\n\t\t\"delete the object from the folder\"\n\t\tsafe_name = self.encode(name)\n\t\tself._delete(safe_name)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tsafe_name",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tsafe_name = self.encode(name)\n\t\tself._delete(safe_name)\n\t# IMPLEMENTED IN SUBCLASSES\n\tdef _put(self, name, data):\n\t\t...\n\tdef _get(self, name):\n\t\t...\t\n\tdef _delete(self, name):\n\t\tpass\n\tdef _list(self):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\traw",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\traw = pickle.dumps(obj)\n\t\tcompressed = self.compress(raw)\n\t\tencrypted = self.encrypt(compressed)\n\t\treturn encrypted\n\tdef deserialize(self, encrypted):\n\t\tcompressed = self.decrypt(encrypted)\n\t\traw = self.decompress(compressed)\n\t\tobj = pickle.loads(raw)\n\t\treturn obj\n\tdef encrypt(self, raw):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tcompressed",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tcompressed = self.compress(raw)\n\t\tencrypted = self.encrypt(compressed)\n\t\treturn encrypted\n\tdef deserialize(self, encrypted):\n\t\tcompressed = self.decrypt(encrypted)\n\t\traw = self.decompress(compressed)\n\t\tobj = pickle.loads(raw)\n\t\treturn obj\n\tdef encrypt(self, raw):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tencrypted",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tencrypted = self.encrypt(compressed)\n\t\treturn encrypted\n\tdef deserialize(self, encrypted):\n\t\tcompressed = self.decrypt(encrypted)\n\t\traw = self.decompress(compressed)\n\t\tobj = pickle.loads(raw)\n\t\treturn obj\n\tdef encrypt(self, raw):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn cipher.encrypt(pad(raw, self.AES_BLOCK_SIZE))",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tcompressed",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tcompressed = self.decrypt(encrypted)\n\t\traw = self.decompress(compressed)\n\t\tobj = pickle.loads(raw)\n\t\treturn obj\n\tdef encrypt(self, raw):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn cipher.encrypt(pad(raw, self.AES_BLOCK_SIZE))\n\tdef decrypt(self, encrypted):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn unpad(cipher.decrypt(encrypted), self.AES_BLOCK_SIZE)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\traw",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\traw = self.decompress(compressed)\n\t\tobj = pickle.loads(raw)\n\t\treturn obj\n\tdef encrypt(self, raw):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn cipher.encrypt(pad(raw, self.AES_BLOCK_SIZE))\n\tdef decrypt(self, encrypted):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn unpad(cipher.decrypt(encrypted), self.AES_BLOCK_SIZE)\n\tdef compress(self, data):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tobj = pickle.loads(raw)\n\t\treturn obj\n\tdef encrypt(self, raw):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn cipher.encrypt(pad(raw, self.AES_BLOCK_SIZE))\n\tdef decrypt(self, encrypted):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn unpad(cipher.decrypt(encrypted), self.AES_BLOCK_SIZE)\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tcipher",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn cipher.encrypt(pad(raw, self.AES_BLOCK_SIZE))\n\tdef decrypt(self, encrypted):\n\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn unpad(cipher.decrypt(encrypted), self.AES_BLOCK_SIZE)\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)\n\tdef decompress(self, data):\n\t\treturn zlib.decompress(data)\n\tdef encode(self, name):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tcipher",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tcipher = AES.new(unhexlify(self.passwd), self.AES_MODE)\n\t\treturn unpad(cipher.decrypt(encrypted), self.AES_BLOCK_SIZE)\n\tdef compress(self, data):\n\t\treturn zlib.compress(data)\n\tdef decompress(self, data):\n\t\treturn zlib.decompress(data)\n\tdef encode(self, name):\n\t\treturn hexlify(name.encode('utf8')).decode('utf8')\n\tdef decode(self, name):\n\t\treturn unhexlify(name).decode('utf8')",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.data",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.data = data_dict\n\tdef _put(self, name, data):\n\t\tif self.folder not in self.data:\n\t\t\tself.data[self.folder] = {}\n\t\tself.data[self.folder][name] = data\n\tdef _get(self, name):\n\t\treturn self.data[self.folder][name]\n\tdef _list(self):\n\t\t# TODO: sort by modification time (reverse=True)\n\t\treturn list(self.data.get(self.folder,{}).keys())",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.data[self.folder]",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\t\tself.data[self.folder] = {}\n\t\tself.data[self.folder][name] = data\n\tdef _get(self, name):\n\t\treturn self.data[self.folder][name]\n\tdef _list(self):\n\t\t# TODO: sort by modification time (reverse=True)\n\t\treturn list(self.data.get(self.folder,{}).keys())\n\tdef _delete(self, name):\n\t\tdel self.data[self.folder][name]\nclass LocalStorage(Storage):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.data[self.folder][name]",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.data[self.folder][name] = data\n\tdef _get(self, name):\n\t\treturn self.data[self.folder][name]\n\tdef _list(self):\n\t\t# TODO: sort by modification time (reverse=True)\n\t\treturn list(self.data.get(self.folder,{}).keys())\n\tdef _delete(self, name):\n\t\tdel self.data[self.folder][name]\nclass LocalStorage(Storage):\n\t\"Local filesystem based storage\"",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.path",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.path = os.path.join(path, self.folder)\n\t\tif not os.path.exists(self.path):\n\t\t\tos.makedirs(self.path)\n\tdef _put(self, name, data):\n\t\twith open(os.path.join(self.path, name), 'wb') as f:\n\t\t\tf.write(data)\n\tdef _get(self, name):\n\t\twith open(os.path.join(self.path, name), 'rb') as f:\n\t\t\tdata = f.read()\n\t\treturn data",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\t\tdata = f.read()\n\t\treturn data\n\tdef _list(self):\n\t\t# TODO: sort by modification time (reverse=True)\n\t\treturn os.listdir(self.path)\n\tdef _delete(self, name):\n\t\tos.remove(os.path.join(self.path, name))\nclass S3Storage(Storage):\n\t\"S3 based encrypted storage\"\n\tdef __init__(self, secret_key, **kw):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tprefix = kw.get('prefix') or os.getenv('S3_PREFIX','index/x1')\n\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\tbucket = kw.get('bucket') or os.getenv('S3_BUCKET','ask-my-pdf')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tregion",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tregion = kw.get('region') or os.getenv('S3_REGION','sfo3')\n\t\tbucket = kw.get('bucket') or os.getenv('S3_BUCKET','ask-my-pdf')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#\n\t\tsuper().__init__(secret_key)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tbucket",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tbucket = kw.get('bucket') or os.getenv('S3_BUCKET','ask-my-pdf')\n\t\turl    = kw.get('url')    or os.getenv('S3_URL',f'https://{region}.digitaloceanspaces.com')\n\t\tkey    = os.getenv('S3_KEY','')\n\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#\n\t\tsuper().__init__(secret_key)\n\t\tself.session = boto3.session.Session()",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tsecret",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tsecret = os.getenv('S3_SECRET','')\n\t\t#\n\t\tif not key or not secret:\n\t\t\traise Exception(\"No S3 credentials in environment variables!\")\n\t\t#\n\t\tsuper().__init__(secret_key)\n\t\tself.session = boto3.session.Session()\n\t\tself.s3 = self.session.client('s3',\n\t\t\t\tconfig=botocore.config.Config(s3={'addressing_style': 'virtual'}),\n\t\t\t\tregion_name=region,",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.session",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.session = boto3.session.Session()\n\t\tself.s3 = self.session.client('s3',\n\t\t\t\tconfig=botocore.config.Config(s3={'addressing_style': 'virtual'}),\n\t\t\t\tregion_name=region,\n\t\t\t\tendpoint_url=url,\n\t\t\t\taws_access_key_id=key,\n\t\t\t\taws_secret_access_key=secret,\n\t\t\t)\n\t\tself.bucket = bucket\n\t\tself.prefix = prefix",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.s3",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.s3 = self.session.client('s3',\n\t\t\t\tconfig=botocore.config.Config(s3={'addressing_style': 'virtual'}),\n\t\t\t\tregion_name=region,\n\t\t\t\tendpoint_url=url,\n\t\t\t\taws_access_key_id=key,\n\t\t\t\taws_secret_access_key=secret,\n\t\t\t)\n\t\tself.bucket = bucket\n\t\tself.prefix = prefix\n\tdef get_key(self, name):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.bucket",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.bucket = bucket\n\t\tself.prefix = prefix\n\tdef get_key(self, name):\n\t\treturn f'{self.prefix}/{self.folder}/{name}'\n\tdef _put(self, name, data):\n\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, key)\n\tdef _get(self, name):\n\t\tkey = self.get_key(name)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tself.prefix",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tself.prefix = prefix\n\tdef get_key(self, name):\n\t\treturn f'{self.prefix}/{self.folder}/{name}'\n\tdef _put(self, name, data):\n\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, key)\n\tdef _get(self, name):\n\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO()",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, key)\n\tdef _get(self, name):\n\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO()\n\t\tself.s3.download_fileobj(self.bucket, key, f)\n\t\tf.seek(0)\n\t\treturn f.read()\n\tdef _list(self):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tf = io.BytesIO(data)\n\t\tself.s3.upload_fileobj(f, self.bucket, key)\n\tdef _get(self, name):\n\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO()\n\t\tself.s3.download_fileobj(self.bucket, key, f)\n\t\tf.seek(0)\n\t\treturn f.read()\n\tdef _list(self):\n\t\tresp = self.s3.list_objects(",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tkey = self.get_key(name)\n\t\tf = io.BytesIO()\n\t\tself.s3.download_fileobj(self.bucket, key, f)\n\t\tf.seek(0)\n\t\treturn f.read()\n\tdef _list(self):\n\t\tresp = self.s3.list_objects(\n\t\t\t\tBucket=self.bucket,\n\t\t\t\tPrefix=self.get_key('')\n\t\t\t)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tf = io.BytesIO()\n\t\tself.s3.download_fileobj(self.bucket, key, f)\n\t\tf.seek(0)\n\t\treturn f.read()\n\tdef _list(self):\n\t\tresp = self.s3.list_objects(\n\t\t\t\tBucket=self.bucket,\n\t\t\t\tPrefix=self.get_key('')\n\t\t\t)\n\t\tcontents = resp.get('Contents',[])",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tresp",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tresp = self.s3.list_objects(\n\t\t\t\tBucket=self.bucket,\n\t\t\t\tPrefix=self.get_key('')\n\t\t\t)\n\t\tcontents = resp.get('Contents',[])\n\t\tcontents.sort(key=lambda x:x['LastModified'], reverse=True)\n\t\tkeys = [x['Key'] for x in contents]\n\t\tnames = [x.split('/')[-1] for x in keys]\n\t\treturn names\n\tdef _delete(self, name):",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tcontents",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tcontents = resp.get('Contents',[])\n\t\tcontents.sort(key=lambda x:x['LastModified'], reverse=True)\n\t\tkeys = [x['Key'] for x in contents]\n\t\tnames = [x.split('/')[-1] for x in keys]\n\t\treturn names\n\tdef _delete(self, name):\n\t\tself.s3.delete_object(\n\t\t\t\tBucket=self.bucket,\n\t\t\t\tKey=self.get_key(name)\n\t\t\t)",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tkeys",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tkeys = [x['Key'] for x in contents]\n\t\tnames = [x.split('/')[-1] for x in keys]\n\t\treturn names\n\tdef _delete(self, name):\n\t\tself.s3.delete_object(\n\t\t\t\tBucket=self.bucket,\n\t\t\t\tKey=self.get_key(name)\n\t\t\t)\ndef get_storage(api_key, data_dict):\n\t\"get storage adapter configured in environment variables\"",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tnames",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tnames = [x.split('/')[-1] for x in keys]\n\t\treturn names\n\tdef _delete(self, name):\n\t\tself.s3.delete_object(\n\t\t\t\tBucket=self.bucket,\n\t\t\t\tKey=self.get_key(name)\n\t\t\t)\ndef get_storage(api_key, data_dict):\n\t\"get storage adapter configured in environment variables\"\n\tmode = os.getenv('STORAGE_MODE','').upper()",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\tmode",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\tmode = os.getenv('STORAGE_MODE','').upper()\n\tpath = os.getenv('STORAGE_PATH','')\n\tif mode=='S3':\n\t\tstorage = S3Storage(api_key)\n\telif mode=='LOCAL':\n\t\tstorage = LocalStorage(api_key, path)\n\telse:\n\t\tstorage = DictStorage(api_key, data_dict)\n\treturn storage",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\tpath",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\tpath = os.getenv('STORAGE_PATH','')\n\tif mode=='S3':\n\t\tstorage = S3Storage(api_key)\n\telif mode=='LOCAL':\n\t\tstorage = LocalStorage(api_key, path)\n\telse:\n\t\tstorage = DictStorage(api_key, data_dict)\n\treturn storage",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tstorage",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tstorage = S3Storage(api_key)\n\telif mode=='LOCAL':\n\t\tstorage = LocalStorage(api_key, path)\n\telse:\n\t\tstorage = DictStorage(api_key, data_dict)\n\treturn storage",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tstorage",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tstorage = LocalStorage(api_key, path)\n\telse:\n\t\tstorage = DictStorage(api_key, data_dict)\n\treturn storage",
        "detail": "src.storage",
        "documentation": {}
    },
    {
        "label": "\t\tstorage",
        "kind": 5,
        "importPath": "src.storage",
        "description": "src.storage",
        "peekOfCode": "\t\tstorage = DictStorage(api_key, data_dict)\n\treturn storage",
        "detail": "src.storage",
        "documentation": {}
    }
]